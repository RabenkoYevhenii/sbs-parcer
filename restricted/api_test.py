from playwright.sync_api import sync_playwright
import json
import csv
import time
from datetime import datetime
import os
from typing import List, Dict, Set, Tuple


class SBCAttendeesScraper:
    def __init__(self, headless=True):
        self.headless = headless
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        self.is_logged_in = False

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±—Ä–∞—É–∑–µ—Ä —ñ –ª–æ–≥—ñ–Ω–∏—Ç—å—Å—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä...")
        self.playwright = sync_playwright().start()
        self.browser = self.playwright.chromium.launch(headless=self.headless)
        self.context = self.browser.new_context(
            user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        )
        self.page = self.context.new_page()

        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è
        return self.login()

    def login(self):
        """–í–∏–∫–æ–Ω—É—î –ª–æ–≥—ñ–Ω"""
        print("üìÑ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ sbcconnect.com...")
        self.page.goto("https://sbcconnect.com", wait_until="domcontentloaded")
        self.page.wait_for_timeout(5000)

        print("üîë –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è...")
        result = self.page.evaluate(
            """
            async () => {
                const response = await fetch('https://sbcconnect.com/api/account/login', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        username: 'at@flexify.finance',
                        password: 'flexify.financeSBC1',
                        rememberMe: true
                    })
                });
                const data = await response.json();
                return {status: response.status, data: data};
            }
        """
        )

        if result["status"] == 200:
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–ª–æ–≥—ñ–Ω–∏–ª–∏—Å—è!")
            self.is_logged_in = True
            return result["data"]
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É: {result}")
            return None

    def api_request(self, method, endpoint, data=None):
        """–í–∏–∫–æ–Ω—É—î API –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        if not self.is_logged_in:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è")
            return None

        url = (
            f"https://sbcconnect.com/api/{endpoint}"
            if not endpoint.startswith("http")
            else endpoint
        )

        js_code = """
            async (params) => {
                const {url, method, data} = params;
                const options = {
                    method: method,
                    headers: {
                        'Accept': 'application/json, text/plain, */*',
                        'Content-Type': 'application/json'
                    }
                };
                
                if (data && method !== 'GET') {
                    options.body = JSON.stringify(data);
                }
                
                try {
                    const response = await fetch(url, options);
                    let responseData;
                    const contentType = response.headers.get('content-type');
                    
                    if (contentType && contentType.includes('application/json')) {
                        responseData = await response.json();
                    } else {
                        responseData = await response.text();
                    }
                    
                    return {
                        status: response.status,
                        data: responseData
                    };
                } catch (error) {
                    return {
                        status: 'error',
                        message: error.toString()
                    };
                }
            }
        """

        params = {"url": url, "method": method, "data": data}
        result = self.page.evaluate(js_code, params)

        if result.get("status") == 200:
            return result.get("data")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ {endpoint}: {result.get('status')}")
            return None

    def advanced_search(self, from_index=0, size=2000):
        """–í–∏–∫–æ–Ω—É—î advanced search –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
        search_params = {
            "name": None,
            "title": None,
            "companyName": None,
            "countries": [],
            "areaOfResp": [],
            "gamingVerticals": [
                "Online: Sports Betting",
                "Online: Casino",
                "Online: Poker",
                "Online: Slots",
                "Online: Bingo",
                "Online: Lottery",
                "Online: Fantasy Sports",
                "Online: Esports",
            ],
            "organizationTypes": [
                "Operator - Casino/Bookmaker/Sportsbook",
                "Supplier/Service Provider",
                "Affiliate",
                "Sports Organisation",
            ],
        }

        endpoint = f"attendee/advancedSearch?eventPath=sbc-summit-2025&from={from_index}&size={size}"
        return self.api_request("POST", endpoint, search_params)

    def get_all_advanced_search_results(self):
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ advanced search"""
        all_results = []
        from_index = 0
        size = 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä

        while True:
            print(f"\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ —ñ–Ω–¥–µ–∫—Å—É {from_index}...")
            batch = self.advanced_search(from_index, size)

            if not batch:
                print("   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É")
                break

            if isinstance(batch, list):
                if len(batch) == 0:
                    print("   üìä –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è (–ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫)")
                    break

                all_results.extend(batch)
                print(
                    f"   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(batch)} –∑–∞–ø–∏—Å—ñ–≤ (–≤—Å—å–æ–≥–æ: {len(all_results)})"
                )

                if len(batch) < size:
                    print(
                        f"   üìä –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è (–æ—Ç—Ä–∏–º–∞–Ω–æ {len(batch)} < {size})"
                    )
                    break

                from_index += size
                time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            else:
                print(f"   ‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {type(batch)}")
                break

        return all_results

    def get_user_details(self, user_id):
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        endpoint = f"user/getById?userId={user_id}&eventPath=sbc-summit-2025"
        return self.api_request("GET", endpoint)

    def load_existing_attendees(self, csv_file="attendees.csv"):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –∑ CSV"""
        existing = set()

        if not os.path.exists(csv_file):
            print(f"‚ö†Ô∏è –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return existing

        with open(csv_file, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –∑ full_name —Ç–∞ company_name
                full_name = row.get("full_name", "").strip().lower()
                company = row.get("company_name", "").strip().lower()

                if full_name:  # –ú—ñ–Ω—ñ–º—É–º –ø–æ—Ç—Ä—ñ–±–Ω–µ —ñ–º'—è
                    key = f"{full_name}|{company}"
                    existing.add(key)

        print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(existing)} —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ {csv_file}")
        return existing

    def find_new_attendees(self, search_results, existing_keys):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤"""
        new_attendees = []

        for attendee in search_results:
            # –§–æ—Ä–º—É—î–º–æ full_name
            first_name = (attendee.get("firstName") or "").strip()
            last_name = (attendee.get("lastName") or "").strip()
            full_name = f"{first_name} {last_name}".strip().lower()

            # –û—Ç—Ä–∏–º—É—î–º–æ company
            company = (attendee.get("companyName") or "").strip().lower()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á
            if full_name:
                key = f"{full_name}|{company}"

                if key not in existing_keys:
                    new_attendees.append(attendee)

        return new_attendees

    def format_attendee_for_csv(self, attendee_details):
        """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∞ –¥–ª—è CSV"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î userProfile (–¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ) —á–∏ —Ü–µ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
        if "userProfile" in attendee_details:
            # –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ API get_user_details
            profile = attendee_details["userProfile"]
            first_name = profile.get("firstName", "")
            last_name = profile.get("lastName", "")
            full_name = f"{first_name} {last_name}".strip()

            return {
                "full_name": full_name,
                "company_name": profile.get("companyName", ""),
                "position": profile.get("jobTitle", ""),
                "linkedin_url": profile.get("linkedInUrl", ""),
                "facebook_url": profile.get("facebookUrl", ""),
                "x_twitter_url": profile.get("twitterUrl", ""),
                "other_socials": profile.get(
                    "website", ""
                ),  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ website —è–∫ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É
                "country": profile.get("country", ""),
                "responsibility": profile.get("areaOfResponsibility", ""),
                "gaming_vertical": profile.get("mainGamingVertical", ""),
                "organization_type": profile.get("organizationType", ""),
                "introduction": profile.get("introduction", ""),
                "source_url": f"https://sbcconnect.com/event/sbc-summit-2025/attendees/{attendee_details.get('userId', '')}",
                "profile_image_url": profile.get("photoUrl", ""),
            }
        else:
            # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ advanced search
            first_name = attendee_details.get("firstName", "")
            last_name = attendee_details.get("lastName", "")
            full_name = f"{first_name} {last_name}".strip()

            return {
                "full_name": full_name,
                "company_name": attendee_details.get("companyName", ""),
                "position": attendee_details.get("jobTitle", ""),
                "linkedin_url": "",  # –¶—ñ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                "facebook_url": "",
                "x_twitter_url": "",
                "other_socials": "",
                "country": "",
                "responsibility": "",
                "gaming_vertical": "",
                "organization_type": "",
                "introduction": "",
                "source_url": f"https://sbcconnect.com/event/sbc-summit-2025/attendees/{attendee_details.get('userId', '')}",
                "profile_image_url": attendee_details.get("photoUrl", ""),
            }

    def save_new_attendees(self, new_attendees_data, csv_file="attendees.csv"):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–æ CSV —Ñ–∞–π–ª—É"""
        file_exists = os.path.exists(csv_file)

        with open(csv_file, "a", newline="", encoding="utf-8") as f:
            fieldnames = [
                "full_name",
                "company_name",
                "position",
                "linkedin_url",
                "facebook_url",
                "x_twitter_url",
                "other_socials",
                "country",
                "responsibility",
                "gaming_vertical",
                "organization_type",
                "introduction",
                "source_url",
                "profile_image_url",
            ]

            writer = csv.DictWriter(f, fieldnames=fieldnames)

            # –ü–∏—à–µ–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —è–∫—â–æ —Ñ–∞–π–ª –Ω–æ–≤–∏–π
            if not file_exists:
                writer.writeheader()

            # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ
            for attendee in new_attendees_data:
                writer.writerow(attendee)

        print(
            f"üíæ –î–æ–¥–∞–Ω–æ {len(new_attendees_data)} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–æ {csv_file}"
        )

    def process_new_attendees(self, new_attendees):
        """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ - –æ—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ"""
        detailed_data = []
        total = len(new_attendees)

        print(f"\nüîç –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è {total} –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤...")

        for i, attendee in enumerate(new_attendees, 1):
            user_id = attendee.get("userId")
            if not user_id:
                print(f"   [{i}/{total}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å –±–µ–∑ userId")
                continue

            full_name = f"{attendee.get('firstName', '')} {attendee.get('lastName', '')}".strip()
            print(
                f"   [{i}/{total}] –û–±—Ä–æ–±–ª—è—î–º–æ {full_name} (ID: {user_id})..."
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            details = self.get_user_details(user_id)

            if details and isinstance(details, dict):
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î userProfile –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if "userProfile" in details:
                    print(f"       ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
                    formatted = self.format_attendee_for_csv(details)
                else:
                    print(
                        f"       ‚ö†Ô∏è –ù–µ–º–∞—î userProfile, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ"
                    )
                    formatted = self.format_attendee_for_csv(attendee)
                detailed_data.append(formatted)
            else:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
                print(
                    f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ"
                )
                formatted = self.format_attendee_for_csv(attendee)
                detailed_data.append(formatted)

            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            if i % 10 == 0:
                time.sleep(1)

        return detailed_data

    def run_update(self, csv_file="attendees.csv"):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏"""
        print("\n" + "=" * 60)
        print("üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –£–ß–ê–°–ù–ò–ö–Ü–í SBC SUMMIT 2025")
        print("=" * 60)

        # 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ advanced search
        print("\nüì° –ï—Ç–∞–ø 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ advanced search...")
        all_results = self.get_all_advanced_search_results()
        print(f"‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(all_results)} —É—á–∞—Å–Ω–∏–∫—ñ–≤")

        # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—É –±–∞–∑—É
        print("\nüìã –ï—Ç–∞–ø 2: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–æ—é –±–∞–∑–æ—é...")
        existing_keys = self.load_existing_attendees(csv_file)

        # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–≤–∏—Ö
        new_attendees = self.find_new_attendees(all_results, existing_keys)
        print(f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö: {len(new_attendees)} —É—á–∞—Å–Ω–∏–∫—ñ–≤")

        if not new_attendees:
            print("\n‚úÖ –ë–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ–º–∞—î")
            return

        # 4. –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–∏—Ö
        print("\nüîç –ï—Ç–∞–ø 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
        detailed_data = self.process_new_attendees(new_attendees)

        # 5. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ CSV
        print("\nüíæ –ï—Ç–∞–ø 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
        self.save_new_attendees(detailed_data, csv_file)

        # 6. –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –∑ –Ω–æ–≤–∏–º–∏
        today = datetime.now().strftime("%m_%d")
        new_file = f"attendees_{today}.csv"
        with open(new_file, "w", newline="", encoding="utf-8") as f:
            fieldnames = [
                "full_name",
                "company_name",
                "position",
                "linkedin_url",
                "facebook_url",
                "x_twitter_url",
                "other_socials",
                "country",
                "responsibility",
                "gaming_vertical",
                "organization_type",
                "introduction",
                "source_url",
                "profile_image_url",
            ]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(detailed_data)

        print(f"üíæ –¢–∞–∫–æ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {new_file}")

        print("\n" + "=" * 60)
        print("‚úÖ –û–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
        print(
            f"   –í—Å—å–æ–≥–æ –≤ –±–∞–∑—ñ: {len(existing_keys) + len(new_attendees)} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        )
        print(f"   –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö: {len(new_attendees)}")
        print("=" * 60)

    def close(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –±—Ä–∞—É–∑–µ—Ä"""
        if self.browser:
            self.browser.close()
        if self.playwright:
            self.playwright.stop()
        print("üëã –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")


# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    scraper = SBCAttendeesScraper(headless=False)

    try:
        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è
        if scraper.start():
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            scraper.run_update("attendees.csv")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è")

    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        input("\n‚è∏Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä...")
        scraper.close()
