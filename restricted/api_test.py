from playwright.sync_api import sync_playwright
import json
import csv
import time
from datetime import datetime, timedelta
import os
import uuid
import re
import random
import shutil
import traceback
from zoneinfo import ZoneInfo
from typing import List, Dict, Set, Tuple, Optional
from config import settings

try:
    import pandas as pd

    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False

# Import ContactExtractor from the parent directory
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from extract_contacts import ContactExtractor


class SBCAttendeesScraper:
    def __init__(self, headless=True):
        self.headless = headless
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        self.is_logged_in = False
        self.current_account = None
        self.existing_chats = {}  # –ö–µ—à —ñ—Å–Ω—É—é—á–∏—Ö —á–∞—Ç—ñ–≤ {user_id: chat_id}

        # Initialize contact extractor for immediate contact extraction during scraping
        self.contact_extractor = ContactExtractor()

        # Company exclusion list cache
        self.excluded_companies = []
        self._load_excluded_companies()

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö environment variables
        self._validate_env_variables()

        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ environment variables
        self.accounts = {
            "scraper": {
                "username": settings.scraper_username,
                "password": settings.scraper_password,
                "user_id": settings.scraper_user_id,
                "name": f"Scraper Account ({settings.scraper_username})",
                "role": "scraping",
            },
            "messenger1": {
                "username": settings.messenger1_username,
                "password": settings.messenger1_password,
                "user_id": settings.messenger1_user_id,
                "name": f"Messenger Account 1 ({settings.messenger1_username})",
                "role": "messaging",
            },
            "messenger2": {
                "username": settings.messenger2_username,
                "password": settings.messenger2_password,
                "user_id": settings.messenger2_user_id,
                "name": f"Messenger Account 2 ({settings.messenger2_username})",
                "role": "messaging",
            },
            "messenger3": {
                "username": settings.messenger3_username,
                "password": settings.messenger3_password,
                "user_id": settings.messenger3_user_id,
                "name": f"Messenger Account 3 ({settings.messenger3_username})",
                "role": "messaging",
            },
        }

        # –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è follow-up
        self.follow_up_messages = [
            "Hello {name} !\nI'm thrilled to see you at the SBC Summit in Lisbon this week! Before things get hectic, it's always a pleasure to connect with other iGaming experts.\nI speak on behalf of Flexify Finance, a company that specializes in smooth payments for high-risk industries. Visit us at Stand E613 if you're looking into new payment options or simply want to discuss innovation.\nWhat is your main objective or priority for the expo this year? I'd love to know what you're thinking about!",
            "Hi {name} !\nExcited to connect with fellow SBC Summit attendees! I'm representing Flexify Finance - we provide payment solutions specifically designed for iGaming and high-risk industries.\nWe'll be at Stand E613 during the summit in Lisbon. Would love to learn about your current payment challenges or discuss the latest trends in our industry.\nWhat brings you to SBC Summit this year? Any specific goals or connections you're hoping to make?",
            "Hello {name} !\nLooking forward to the SBC Summit in Lisbon! As someone in the iGaming space, I always enjoy connecting with industry professionals before the event buzz begins.\nI'm with Flexify Finance - we specialize in seamless payment processing for high-risk sectors. Feel free to stop by Stand E613 if you'd like to explore new payment innovations.\nWhat are you most excited about at this year's summit? Any particular sessions or networking goals?",
            "Hi {name}, looks like we'll both be at SBC Lisbon today!\nAlways great to meet fellow iGaming pros before the chaos begins.\nI'm with Flexify Finance, a payments provider for high-risk verticals - you'll find us at Stand E613.\nOut of curiosity, what's your main focus at the expo this year ?",
        ]

        # Second follow-up message that always gets sent after the first one
        self.second_follow_up_message = (
            "Is payments something on your radar to explore ?"
        )

        # Follow-up messages for response tracking
        self.follow_up_templates = {
            "day_3": "Hello, {name}\nJust to follow up, Flexify Finance will be present at SBC Summit Lisbon at Stand E613. With more than 80 local payment options, we're helping iGaming brands expand in high-risk markets while also holding a prize draw.\nWould you have a few minutes during the expo? It would be great to connect.",
            "day_7": "Hello {name}!\nJust wanted to gently follow up and let you know that Flexify Finance will be at SBC Summit Lisbon (Stand E613). We're supporting iGaming brands in high-risk markets with 80+ local payment options - and we'll also have a fun prize draw at our stand.\nIf you have a few minutes during the expo, I'd really enjoy connecting and having a quick chat.",
            "final": "Hi {name}!\nSBC Summit Lisbon starts tomorrow! üéâ\nFlexify Finance will be at Stand E613 with 80+ local payment solutions for high-risk markets. We'd love to meet you in person and discuss how we can help your iGaming business grow.\nDon't miss our prize draw at the stand! Looking forward to seeing you there.",
            "conference_active": {
                "en": "We're already at the conference! We're easy to find. The big all-seeing eye üëÅÔ∏è will show you the way to the Flexify booth.",
                "ua": "–ú–∏ –≤–∂–µ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó! –ù–∞—Å –ª–µ–≥–∫–æ –∑–Ω–∞–π—Ç–∏. –ù–∞—à–µ –≤–µ–ª–∏–∫–µ –æ–∫–æ üëÅÔ∏è –ø–æ–∫–∞–∂–µ –≤–∞–º —à–ª—è—Ö –¥–æ —Å—Ç–µ–Ω–¥—É Flexify.",
                "ru": "–ú—ã —É–∂–µ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏! –ù–∞—Å –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏. –ù–∞—à –±–æ–ª—å—à–æ–π –≥–ª–∞–∑ üëÅÔ∏è –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –ø—É—Ç—å –∫ —Å—Ç–µ–Ω–¥—É Flexify.",
            },
        }

        # SBC Summit start date (September 16, 2025) in Kyiv timezone
        kyiv_tz = ZoneInfo("Europe/Kiev")
        self.sbc_start_date = datetime(2025, 9, 16, tzinfo=kyiv_tz)

    def get_data_dir(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ data"""
        # Get the directory where this script is located
        script_dir = os.path.dirname(os.path.abspath(__file__))
        return os.path.join(script_dir, "data")

    def _load_excluded_companies(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω—ñ–π –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –∑ CSV —Ñ–∞–π–ª—É"""
        exclude_file = os.path.join(self.get_data_dir(), "Exclude list.csv")

        if not os.path.exists(exclude_file):
            print(f"‚ö†Ô∏è –§–∞–π–ª –≤–∏–∫–ª—é—á–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {exclude_file}")
            return

        try:
            self.excluded_companies = []
            with open(exclude_file, "r", encoding="utf-8") as f:
                # Skip header
                next(f)
                for line in f:
                    company_name = line.strip()
                    if company_name:
                        # Normalize company name for better matching
                        normalized = self._normalize_company_name(company_name)
                        self.excluded_companies.append(
                            {
                                "original": company_name,
                                "normalized": normalized,
                            }
                        )

            print(
                f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.excluded_companies)} –∫–æ–º–ø–∞–Ω—ñ–π –¥–æ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å"
            )

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å: {e}")

    def _normalize_company_name(self, company_name: str) -> str:
        """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
        if not company_name:
            return ""

        # Convert to lowercase and remove common suffixes/prefixes
        normalized = company_name.lower().strip()

        # Remove common company suffixes
        suffixes_to_remove = [
            " ltd",
            " llc",
            " inc",
            " corp",
            " corporation",
            " company",
            " co",
            " s.a.c",
            " s.a",
            " b.v",
            " gmbh",
            " ag",
            " s.r.l",
            " srl",
            " limited",
            " entertainment",
            " gaming",
            " games",
            " casino",
            " casinos",
            " betting",
            " bet",
            " pay",
            " payment",
            " payments",
        ]

        for suffix in suffixes_to_remove:
            if normalized.endswith(suffix):
                normalized = normalized[: -len(suffix)].strip()

        # Remove special characters but keep spaces and alphanumeric
        import string

        normalized = "".join(
            c for c in normalized if c.isalnum() or c.isspace()
        )

        # Remove extra spaces
        normalized = " ".join(normalized.split())

        return normalized

    def _calculate_similarity(self, str1: str, str2: str) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å—Ö–æ–∂—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ä—è–¥–∫–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ Levenshtein distance"""
        if not str1 or not str2:
            return 0.0

        # Simple Levenshtein distance implementation
        def levenshtein_distance(s1, s2):
            if len(s1) < len(s2):
                return levenshtein_distance(s2, s1)

            if len(s2) == 0:
                return len(s1)

            previous_row = list(range(len(s2) + 1))
            for i, c1 in enumerate(s1):
                current_row = [i + 1]
                for j, c2 in enumerate(s2):
                    insertions = previous_row[j + 1] + 1
                    deletions = current_row[j] + 1
                    substitutions = previous_row[j] + (c1 != c2)
                    current_row.append(
                        min(insertions, deletions, substitutions)
                    )
                previous_row = current_row

            return previous_row[-1]

        distance = levenshtein_distance(str1, str2)
        max_len = max(len(str1), len(str2))

        if max_len == 0:
            return 1.0

        return 1.0 - (distance / max_len)

    def _is_company_excluded(
        self, company_name: str, similarity_threshold: float = 0.8
    ) -> tuple:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ–º–ø–∞–Ω—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å

        Returns:
            tuple: (is_excluded: bool, matched_company: str, similarity_score: float)
        """
        # Handle NaN or None values
        if (
            not company_name
            or not self.excluded_companies
            or str(company_name).lower() in ["nan", "none", ""]
        ):
            return False, "", 0.0

        normalized_input = self._normalize_company_name(company_name)

        best_match = ""
        best_similarity = 0.0

        for excluded_company in self.excluded_companies:
            # Check exact match first
            if normalized_input == excluded_company["normalized"]:
                return True, excluded_company["original"], 1.0

            # Check if one contains the other
            if (
                normalized_input in excluded_company["normalized"]
                or excluded_company["normalized"] in normalized_input
            ):

                # Calculate similarity for containment
                similarity = (
                    max(
                        len(normalized_input)
                        / len(excluded_company["normalized"]),
                        len(excluded_company["normalized"])
                        / len(normalized_input),
                    )
                    if excluded_company["normalized"]
                    else 0.0
                )

                if similarity > best_similarity:
                    best_similarity = similarity
                    best_match = excluded_company["original"]

            # Calculate Levenshtein similarity
            similarity = self._calculate_similarity(
                normalized_input, excluded_company["normalized"]
            )

            if similarity > best_similarity:
                best_similarity = similarity
                best_match = excluded_company["original"]

        # Return True if similarity is above threshold
        is_excluded = best_similarity >= similarity_threshold
        return is_excluded, best_match, best_similarity

    def reload_excluded_companies(self):
        """–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π"""
        self._load_excluded_companies()

    def show_excluded_companies(self):
        """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π"""
        print(f"\nüö´ –°–ü–ò–°–û–ö –í–ò–ö–õ–Æ–ß–ï–ù–ò–• –ö–û–ú–ü–ê–ù–Ü–ô")
        print("=" * 40)

        if not self.excluded_companies:
            print("üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return

        print(f"üìä –í—Å—å–æ–≥–æ –∫–æ–º–ø–∞–Ω—ñ–π —É —Å–ø–∏—Å–∫—É: {len(self.excluded_companies)}")
        print("\nüìã –ö–æ–º–ø–∞–Ω—ñ—ó:")

        for i, company in enumerate(self.excluded_companies, 1):
            original = company["original"]
            normalized = company["normalized"]
            print(f"   {i:3d}. {original}")
            if original.lower() != normalized:
                print(f"        ‚Üí (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: '{normalized}')")

        print(f"\nüí° –§–∞–π–ª –≤–∏–∫–ª—é—á–µ–Ω—å: data/Exclude list.csv")
        print(f"üîÑ –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω—ñ—Ç—å —Ñ–∞–π–ª —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É")

    def test_company_exclusion(self, company_name: str):
        """–¢–µ—Å—Ç—É—î —á–∏ –∫–æ–º–ø–∞–Ω—ñ—è –±—É–¥–µ –≤–∏–∫–ª—é—á–µ–Ω–∞"""
        print(f"\nüß™ –¢–ï–°–¢ –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø –ö–û–ú–ü–ê–ù–Ü–á")
        print("=" * 40)
        print(f"üè¢ –¢–µ—Å—Ç—É—î–º–æ: '{company_name}'")

        is_excluded, matched_company, similarity = self._is_company_excluded(
            company_name
        )

        print(
            f"üìù –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–æ: '{self._normalize_company_name(company_name)}'"
        )
        print(
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ùå –í–ò–ö–õ–Æ–ß–ï–ù–û' if is_excluded else '‚úÖ –î–û–ó–í–û–õ–ï–ù–û'}"
        )

        if matched_company:
            print(f"üîç –ù–∞–π–∫—Ä–∞—â–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è: '{matched_company}'")
            print(f"üìä –°—Ö–æ–∂—ñ—Å—Ç—å: {similarity:.2%}")

        if not is_excluded:
            print(
                "üí° –ö–æ–º–ø–∞–Ω—ñ—è –ù–ï –≤ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ"
            )
        else:
            print(
                "üö´ –ö–æ–º–ø–∞–Ω—ñ—è –≤ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ"
            )

    def _validate_env_variables(self):
        """–í–∞–ª—ñ–¥—É—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö environment variables"""
        required_vars = [
            ("SCRAPER_USERNAME", settings.scraper_username),
            ("SCRAPER_PASSWORD", settings.scraper_password),
            ("SCRAPER_USER_ID", settings.scraper_user_id),
            ("MESSENGER1_USERNAME", settings.messenger1_username),
            ("MESSENGER1_PASSWORD", settings.messenger1_password),
            ("MESSENGER1_USER_ID", settings.messenger1_user_id),
            ("MESSENGER2_USERNAME", settings.messenger2_username),
            ("MESSENGER2_PASSWORD", settings.messenger2_password),
            ("MESSENGER2_USER_ID", settings.messenger2_user_id),
            ("MESSENGER3_USERNAME", settings.messenger3_username),
            ("MESSENGER3_PASSWORD", settings.messenger3_password),
            ("MESSENGER3_USER_ID", settings.messenger3_user_id),
        ]

        missing_vars = []
        for var_name, var_value in required_vars:
            if not var_value or var_value.startswith(("MESSENGER", "your_")):
                missing_vars.append(var_name)

        if missing_vars:
            print(
                "‚ùå –ü–û–ú–ò–õ–ö–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ environment variables:"
            )
            for var in missing_vars:
                print(f"   - {var}")
            print(
                "\nüí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤—ñ .env.template —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:"
            )
            print("   cp .env.template .env")
            print("   # –ø–æ—Ç—ñ–º –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ credentials")
            raise ValueError(
                f"–í—ñ–¥—Å—É—Ç–Ω—ñ environment variables: {', '.join(missing_vars)}"
            )

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±—Ä–∞—É–∑–µ—Ä —ñ –ª–æ–≥—ñ–Ω–∏—Ç—å—Å—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä...")
        self.playwright = sync_playwright().start()
        self.browser = self.playwright.chromium.launch(headless=self.headless)
        self.context = self.browser.new_context(
            user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        )
        self.page = self.context.new_page()

        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è –∑—ñ scraper –∞–∫–∞—É–Ω—Ç–æ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        return self.login("scraper")

    def login(self, account_key="scraper"):
        """–í–∏–∫–æ–Ω—É—î –ª–æ–≥—ñ–Ω –∑ –≤–∫–∞–∑–∞–Ω–∏–º –∞–∫–∞—É–Ω—Ç–æ–º"""
        if account_key not in self.accounts:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∞–∫–∞—É–Ω—Ç: {account_key}")
            return None

        account = self.accounts[account_key]
        self.current_account = account_key

        print("üìÑ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ sbcconnect.com...")
        self.page.goto("https://sbcconnect.com", wait_until="domcontentloaded")
        self.page.wait_for_timeout(5000)

        print(f"üîë –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è –∑ {account['name']}...")
        result = self.page.evaluate(
            f"""
            async () => {{
                const response = await fetch('https://sbcconnect.com/api/account/login', {{
                    method: 'POST',
                    headers: {{'Content-Type': 'application/json'}},
                    body: JSON.stringify({{
                        username: '{account['username']}',
                        password: '{account['password']}',
                        rememberMe: true
                    }})
                }});
                const data = await response.json();
                return {{status: response.status, data: data}};
            }}
        """
        )

        if result["status"] == 200:
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–ª–æ–≥—ñ–Ω–∏–ª–∏—Å—è!")
            self.is_logged_in = True
            return result["data"]
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É: {result}")
            return None

    def logout(self):
        """–í–∏–∫–æ–Ω—É—î –≤–∏—Ö—ñ–¥ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞"""
        if not self.is_logged_in:
            print("‚ÑπÔ∏è –í–∂–µ –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω—ñ")
            return True

        print("üö™ –í–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞...")
        result = self.page.evaluate(
            """
            async () => {
                try {
                    const response = await fetch('https://sbcconnect.com/api/account/logout', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'}
                    });
                    return {status: response.status, data: await response.text()};
                } catch (error) {
                    return {status: 500, error: error.message};
                }
            }
        """
        )

        if (
            result["status"] == 200 or result["status"] == 404
        ):  # 404 –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏ —â–æ –≤–∂–µ –≤–∏–π—à–ª–∏
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç–∞")
            self.is_logged_in = False
            self.current_account = None

            # –û—á–∏—â–∞—î–º–æ –∫–µ—à —á–∞—Ç—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞
            self.existing_chats.clear()

            return True
        else:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ: {result}")
            # –ù–∞–≤—ñ—Ç—å —è–∫—â–æ logout API –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –æ—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            self.is_logged_in = False
            self.current_account = None
            self.existing_chats.clear()
            return True

    def api_request(
        self, method, endpoint, data=None, max_retries=5, timeout_seconds=3
    ):
        """–í–∏–∫–æ–Ω—É—î API –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –∑ —Ç–∞–π–º–∞—É—Ç–æ–º —ñ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
        if not self.is_logged_in:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è")
            return None

        url = (
            f"https://sbcconnect.com/api/{endpoint}"
            if not endpoint.startswith("http")
            else endpoint
        )

        for attempt in range(max_retries):
            try:
                js_code = """
                    async (params) => {
                        const {url, method, data, timeout} = params;
                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => controller.abort(), timeout * 1000);
                        
                        const options = {
                            method: method,
                            headers: {
                                'Accept': 'application/json, text/plain, */*',
                                'Content-Type': 'application/json'
                            },
                            signal: controller.signal
                        };
                        
                        if (data && method !== 'GET') {
                            options.body = JSON.stringify(data);
                        }
                        
                        try {
                            const response = await fetch(url, options);
                            clearTimeout(timeoutId);
                            let responseData;
                            const contentType = response.headers.get('content-type');
                            
                            if (contentType && contentType.includes('application/json')) {
                                responseData = await response.json();
                            } else {
                                responseData = await response.text();
                            }
                            
                            return {
                                status: response.status,
                                data: responseData
                            };
                        } catch (error) {
                            clearTimeout(timeoutId);
                            return {
                                status: 'error',
                                message: error.toString()
                            };
                        }
                    }
                """

                params = {
                    "url": url,
                    "method": method,
                    "data": data,
                    "timeout": timeout_seconds,
                }
                result = self.page.evaluate(js_code, params)

                status = result.get("status", 0)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å 'error' –æ—Ç–¥–µ–ª—å–Ω–æ
                if status == "error":
                    if attempt < max_retries - 1:
                        delay = min(
                            2**attempt * 2, 30
                        )  # Exponential backoff, max 30s
                        print(
                            f"   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.get('message')}"
                        )
                        print(
                            f"   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥..."
                        )
                        time.sleep(delay)
                        continue
                    else:
                        print(
                            f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ {endpoint} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {result.get('message')}"
                        )
                        return None
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                elif isinstance(status, int) and 200 <= status < 300:
                    # –î–ª—è 204 No Content –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True –∑–∞–º—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
                    if status == 204:
                        return True
                    return result.get("data")
                else:
                    if attempt < max_retries - 1:
                        # Special handling for rate limits (429)
                        if status == 429:
                            delay = min(
                                15 + (attempt * 10), 60
                            )  # Start with 15s, increase by 10s each attempt, max 60s
                            print(
                                f"   üö´ Rate limit (429) - –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}"
                            )
                            print(
                                f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞..."
                            )
                        else:
                            delay = min(
                                2**attempt * 3, 30
                            )  # Regular exponential backoff
                            print(
                                f"   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°—Ç–∞—Ç—É—Å {status}"
                            )
                            print(
                                f"   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥..."
                            )

                        time.sleep(delay)
                        continue
                    else:
                        print(
                            f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ {endpoint} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {status}"
                        )
                        if result.get("data"):
                            print(f"      –î–µ—Ç–∞–ª—ñ: {result.get('data')}")
                        return None

            except Exception as e:
                if attempt < max_retries - 1:
                    delay = min(
                        2**attempt * 2, 30
                    )  # Exponential backoff for exceptions
                    print(f"   ‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay)
                    continue
                else:
                    print(
                        f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {endpoint} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}"
                    )
                    return None

        return None

    def advanced_search(self, from_index=0, size=2000):
        """–í–∏–∫–æ–Ω—É—î advanced search –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
        search_params = {
            "name": None,
            "title": None,
            "companyName": None,
            "countries": [],
            "areaOfResp": [],
            "gamingVerticals": [
                "Online: Sports Betting",
                "Online: Casino",
                "Online: Poker",
                "Online: Slots",
                "Online: Bingo",
                "Online: Lottery",
                "Online: Fantasy Sports",
                "Online: Esports",
            ],
            "organizationTypes": [
                "Operator - Casino/Bookmaker/Sportsbook",
                "Supplier/Service Provider",
                "Affiliate",
                "Sports Organisation",
            ],
        }

        endpoint = f"attendee/advancedSearch?eventPath=sbc-summit-2025&from={from_index}&size={size}"
        return self.api_request("POST", endpoint, search_params)

    def get_all_advanced_search_results(self):
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ advanced search"""
        all_results = []
        from_index = 0
        size = 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä

        while True:
            print(f"\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ —ñ–Ω–¥–µ–∫—Å—É {from_index}...")
            batch = self.advanced_search(from_index, size)

            if not batch:
                print("   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É")
                break

            if isinstance(batch, list):
                if len(batch) == 0:
                    print("   üìä –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è (–ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫)")
                    break

                all_results.extend(batch)
                print(
                    f"   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(batch)} –∑–∞–ø–∏—Å—ñ–≤ (–≤—Å—å–æ–≥–æ: {len(all_results)})"
                )

                if len(batch) < size:
                    print(
                        f"   üìä –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è (–æ—Ç—Ä–∏–º–∞–Ω–æ {len(batch)} < {size})"
                    )
                    break

                from_index += size
                time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            else:
                print(f"   ‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {type(batch)}")
                break

        return all_results

    def get_user_details(self, user_id):
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        endpoint = f"user/getById?userId={user_id}&eventPath=sbc-summit-2025"
        return self.api_request("GET", endpoint)

    # =================== MESSAGING METHODS ===================

    def load_chats_list(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö —á–∞—Ç—ñ–≤"""
        endpoint = "chat/LoadChatsList?eventPath=sbc-summit-2025"
        chats_data = self.api_request("GET", endpoint)

        if chats_data and isinstance(chats_data, list):
            # –û—Ç—Ä–∏–º—É—î–º–æ user_id –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
            current_user_id = self.accounts[self.current_account]["user_id"]

            # –ö–µ—à—É—î–º–æ —á–∞—Ç–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
            for chat in chats_data:
                chat_id = chat.get("chatId")
                if not chat_id:
                    continue

                # –î–ª—è single —á–∞—Ç—ñ–≤ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —á–∞—Ç–∏)
                if chat.get("isSingleChat") and chat.get("singleChatDetails"):
                    user_info = chat["singleChatDetails"].get("user", {})
                    other_participant_id = user_info.get("id")

                    if (
                        other_participant_id
                        and other_participant_id != current_user_id
                    ):
                        self.existing_chats[other_participant_id] = chat_id

            print(f"üìã –ó–∞–∫–µ—à–æ–≤–∞–Ω–æ {len(self.existing_chats)} —ñ—Å–Ω—É—é—á–∏—Ö —á–∞—Ç—ñ–≤")
            return chats_data
        else:
            return []

    def find_chat_with_user(self, target_user_id: str) -> Optional[str]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ—Å–Ω—É—é—á–∏–π —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
        return self.existing_chats.get(target_user_id)

    def check_chat_has_messages(self, chat_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ"""
        endpoint = f"chat/LoadChat?chatId={chat_id}"
        chat_data = self.api_request("GET", endpoint)

        if chat_data and isinstance(chat_data, dict):
            messages = chat_data.get("messages", [])

            if messages:
                print(f"       üìù –ó–Ω–∞–π–¥–µ–Ω–æ {len(messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ")
                # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                last_message = messages[-1]
                last_msg_preview = last_message.get("message", "")[:50] + "..."
                print(f"       üìÑ –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{last_msg_preview}'")
                return True
            else:
                print(f"       üì≠ –ß–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π (–±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)")
                return False
        else:
            print(f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —á–∞—Ç—É")
            return False

    def create_chat(self, target_user_id: str) -> Optional[str]:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
        current_user_id = self.accounts[self.current_account]["user_id"]

        if not current_user_id:
            return None

        chat_id = str(uuid.uuid4())
        endpoint = "chat/createChat"
        data = {
            "eventPath": "sbc-summit-2025",
            "participants": [current_user_id, target_user_id],
            "chatId": chat_id,
        }

        result = self.api_request("POST", endpoint, data)

        if result is True or result is not None:
            self.existing_chats[target_user_id] = chat_id
            return chat_id
        else:
            return None

    def send_message(self, chat_id: str, message: str) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç"""
        message_id = str(uuid.uuid4())
        # –°—Ç–≤–æ—Ä—é—î–º–æ timestamp —É —Ñ–æ—Ä–º–∞—Ç—ñ UTC –∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞–º–∏
        from datetime import datetime, timezone

        current_time = (
            datetime.now(timezone.utc)
            .isoformat(timespec="milliseconds")
            .replace("+00:00", "Z")
        )

        endpoint = "chat/sendMessage"
        data = {
            "chatId": chat_id,
            "messageId": message_id,
            "message": message,
            "createdDate": current_time,
        }

        result = self.api_request("POST", endpoint, data)
        return result is not None

    def send_message_to_user(
        self,
        target_user_id: str,
        message: str,
        full_name: str = None,
        company_name: str = None,
    ) -> str:
        """–ü–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º follow-up

        Returns:
        - "success": —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        - "already_contacted": —á–∞—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        - "failed": –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        - "excluded_company": –∫–æ–º–ø–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        """
        # 0. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ–º–ø–∞–Ω—ñ—è –≤ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å
        if company_name:
            is_excluded, matched_company, similarity = (
                self._is_company_excluded(company_name)
            )
            if is_excluded:
                print(f"       üö´ –ö–û–ú–ü–ê–ù–Ü–Ø –í–ò–ö–õ–Æ–ß–ï–ù–ê: '{company_name}'")
                print(
                    f"       üìã –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑: '{matched_company}' (—Å—Ö–æ–∂—ñ—Å—Ç—å: {similarity:.2f})"
                )
                # –û–Ω–æ–≤–ª—é—î–º–æ CSV –∑ valid=false –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫—É
                if full_name:
                    csv_file = os.path.join(
                        self.get_data_dir(), "SBC - Attendees.csv"
                    )
                    self.update_csv_excluded_company(
                        csv_file, target_user_id, full_name, company_name
                    )
                return "excluded_company"
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —ñ—Å–Ω—É—é—á–∏–π —á–∞—Ç
        chat_id = self.find_chat_with_user(target_user_id)

        if chat_id:
            # 1.1. –Ø–∫—â–æ —á–∞—Ç —ñ—Å–Ω—É—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤ –Ω—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            print(
                f"       üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á–æ–º—É —á–∞—Ç—ñ..."
            )
            if self.check_chat_has_messages(chat_id):
                print(f"       ‚è≠Ô∏è –ß–∞—Ç –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                # –û–±–Ω–æ–≤–ª—è–µ–º CSV —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Sent" —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                if full_name:
                    csv_file = os.path.join(
                        self.get_data_dir(), "SBC - Attendees.csv"
                    )
                    self.update_csv_with_messaging_status(
                        csv_file, target_user_id, full_name, chat_id
                    )
                return "already_contacted"
            else:
                print(
                    f"       ‚úÖ –ß–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                )
        else:
            # 2. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç
            print(f"       üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç...")
            chat_id = self.create_chat(target_user_id)
            if not chat_id:
                return "failed"

        # 3. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not self.send_message(chat_id, message):
            return "failed"

        # 4. –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        print(f"       ‚úÖ –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print(f"       ‚è±Ô∏è –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º...")
        time.sleep(5)

        # 5. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not self.send_message(chat_id, self.second_follow_up_message):
            print(f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return "failed"

        print(
            f"       ‚úÖ –î—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: '{self.second_follow_up_message}'"
        )

        # 6. –û–Ω–æ–≤–ª—é—î–º–æ CSV —Ñ–∞–π–ª –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        print(f"       üìù –û–Ω–æ–≤–ª—é—î–º–æ CSV —Ñ–∞–π–ª...")
        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")
        if full_name:
            self.update_csv_with_messaging_status(
                csv_file, target_user_id, full_name, chat_id
            )
        else:
            print(
                f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ CSV - –≤—ñ–¥—Å—É—Ç–Ω—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            )

        return "success"

    def load_chat_details(self, chat_id: str) -> Optional[Dict]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç"""
        endpoint = f"chat/LoadChat?chatId={chat_id}"
        return self.api_request("GET", endpoint)

    def parse_message_timestamp(
        self, timestamp_str: str
    ) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç—å timestamp –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ datetime –æ–±'—î–∫—Ç"""
        try:
            # Timestamp format: "2025-09-05T10:30:00.123Z"
            if timestamp_str.endswith("Z"):
                # Remove Z and add UTC timezone
                timestamp_str = timestamp_str[:-1] + "+00:00"

            # Parse the timestamp
            dt = datetime.fromisoformat(timestamp_str)

            # Ensure timezone-aware
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=ZoneInfo("UTC"))

            return dt
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É timestamp {timestamp_str}: {e}")
            return None

    def analyze_chat_for_followup(self, chat_data: Dict) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î —á–∞—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ follow-up"""
        result = {
            "needs_followup": False,
            "followup_type": None,
            "first_message_date": None,
            "participant_name": None,
            "participant_id": None,
            "days_since_first": 0,
            "has_response": False,
        }

        if not chat_data or not isinstance(chat_data, dict):
            return result

        messages = chat_data.get("messages", [])
        if not messages:
            return result

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_user_id = self.accounts[self.current_account]["user_id"]

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞ —á–∞—Ç—É
        if chat_data.get("isSingleChat") and chat_data.get("participants"):
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —É—á–∞—Å–Ω–∏–∫–∞, —è–∫–∏–π –Ω–µ —î –ø–æ—Ç–æ—á–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
            participants = chat_data.get("participants", [])
            for participant in participants:
                if participant.get("userId") != current_user_id:
                    result["participant_id"] = participant.get("userId")
                    result["participant_name"] = (
                        f"{participant.get('firstName', '')} {participant.get('lastName', '')}".strip()
                    )
                    break

        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
        sorted_messages = sorted(
            messages, key=lambda x: x.get("createdDate", "")
        )

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞—Å
        first_our_message = None
        for msg in sorted_messages:
            if msg.get("userId") == current_user_id:
                first_our_message = msg
                break

        if not first_our_message:
            return result

        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        first_message_timestamp = self.parse_message_timestamp(
            first_our_message.get("createdDate", "")
        )
        if not first_message_timestamp:
            return result

        result["first_message_date"] = first_message_timestamp

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        kyiv_tz = ZoneInfo("Europe/Kiev")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        if first_message_timestamp.tzinfo is None:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î timezone info, –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ UTC
            first_message_timestamp = first_message_timestamp.replace(
                tzinfo=ZoneInfo("UTC")
            )

        current_time = datetime.now(kyiv_tz)
        first_message_kyiv = first_message_timestamp.astimezone(kyiv_tz)

        days_diff = (current_time.date() - first_message_kyiv.date()).days
        result["days_since_first"] = days_diff

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —É—á–∞—Å–Ω–∏–∫–∞ –ø—ñ—Å–ª—è –Ω–∞—à–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for msg in sorted_messages:
            msg_timestamp = self.parse_message_timestamp(
                msg.get("createdDate", "")
            )
            if msg.get("userId") != current_user_id and msg_timestamp:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ msg_timestamp –≤ timezone-aware —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if msg_timestamp.tzinfo is None:
                    msg_timestamp = msg_timestamp.replace(
                        tzinfo=ZoneInfo("UTC")
                    )

                # –¢–µ–ø–µ—Ä –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ timezone-aware datetimes
                if msg_timestamp > first_message_timestamp:
                    result["has_response"] = True
                    break

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø follow-up
        if not result["has_response"]:
            # –ó–∞ 1 –¥–µ–Ω—å –¥–æ SBC (15 –≤–µ—Ä–µ—Å–Ω—è)
            sbc_date_kyiv = self.sbc_start_date.astimezone(kyiv_tz)
            days_until_sbc = (sbc_date_kyiv.date() - current_time.date()).days

            if days_until_sbc == 1:  # –ó–∞ 1 –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó
                result["needs_followup"] = True
                result["followup_type"] = "final"
            elif days_diff >= 7:  # 7+ –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                result["needs_followup"] = True
                result["followup_type"] = "day_7"
            elif days_diff >= 3:  # 3+ –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                result["needs_followup"] = True
                result["followup_type"] = "day_3"

        return result

    def send_followup_message(
        self,
        chat_id: str,
        followup_type: str,
        participant_name: str,
        language: str = "en",
    ) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î follow-up –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º–æ–≤–∏"""
        if followup_type not in self.follow_up_templates:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø follow-up: {followup_type}")
            return False

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–µ —ñ–º'—è
        first_name = (
            participant_name.split()[0]
            if participant_name.split()
            else "there"
        )

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        template = self.follow_up_templates[followup_type]

        # Handle multi-language templates (like conference_active)
        if isinstance(template, dict):
            # Use detected language or fallback to English
            if language in template:
                message_template = template[language]
            else:
                message_template = template.get(
                    "en", list(template.values())[0]
                )
        else:
            # Handle old-style string templates
            message_template = template

        # Format message with name if it contains {name}
        if "{name}" in message_template:
            message = message_template.format(name=first_name)
        else:
            message = message_template

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return self.send_message(chat_id, message)

    def process_followup_campaigns(
        self, account_key: str = None
    ) -> Dict[str, int]:
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —á–∞—Ç–∏ –¥–ª—è follow-up –∫–∞–º–ø–∞–Ω—ñ–π"""
        if account_key and account_key != self.current_account:
            print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –∞–∫–∞—É–Ω—Ç {account_key}...")
            if not self.switch_account(account_key):
                return {"error": 1}

        print(f"\nüì¨ –û–ë–†–û–ë–ö–ê FOLLOW-UP –ö–ê–ú–ü–ê–ù–Ü–ô")
        print(f"üë§ –ê–∫–∞—É–Ω—Ç: {self.accounts[self.current_account]['name']}")
        print("=" * 50)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤...")
        chats_data = self.load_chats_list()

        if not chats_data:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–∞—Ç–∏")
            return {"error": 1}

        stats = {
            "total_chats": len(chats_data),
            "analyzed": 0,
            "day_3_sent": 0,
            "day_7_sent": 0,
            "final_sent": 0,
            "has_responses": 0,
            "chat_ids_stored": 0,
            "errors": 0,
        }

        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {stats['total_chats']} —á–∞—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")

        # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ —à–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è chat_id
        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        for i, chat in enumerate(chats_data, 1):
            chat_id = chat.get("chatId")
            if not chat_id:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏
            if not chat.get("isSingleChat"):
                continue

            print(
                f"\n[{i}/{stats['total_chats']}] –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç {chat_id[:8]}..."
            )

            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (1-3 —Å–µ–∫—É–Ω–¥–∏)
            delay = random.uniform(1.0, 3.0)
            print(f"   ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º...")
            time.sleep(delay)

            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
                chat_details = self.load_chat_details(chat_id)
                if not chat_details:
                    print("   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —á–∞—Ç—É")
                    stats["errors"] += 1
                    continue

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç
                analysis = self.analyze_chat_for_followup(chat_details)
                stats["analyzed"] += 1

                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç –¥–ª—è –¥–µ–±–∞–≥—É
                print(
                    f"   üîç Debug: participant_id={analysis.get('participant_id', 'None')}"
                )
                print(
                    f"   üîç Debug: participant_name={analysis.get('participant_name', 'None')}"
                )

                if analysis["participant_name"]:
                    print(f"   üë§ –£—á–∞—Å–Ω–∏–∫: {analysis['participant_name']}")

                if analysis["first_message_date"]:
                    print(
                        f"   üìÖ –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {analysis['first_message_date'].strftime('%d.%m.%Y')}"
                    )
                    print(
                        f"   ‚è∞ –î–Ω—ñ–≤ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {analysis['days_since_first']}"
                    )

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ chat_id –≤ CSV —è–∫—â–æ —î participant_id
                if analysis["participant_id"]:
                    success = self.update_csv_with_chat_id(
                        csv_file,
                        analysis["participant_id"],
                        chat_id,
                        analysis.get("participant_name"),
                    )
                    if success:
                        print(f"   üíæ chat_id –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ CSV")
                        stats["chat_ids_stored"] += 1
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ chat_id –≤ CSV")
                else:
                    print(
                        f"   ‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π participant_id, chat_id –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
                    )

                if analysis["has_response"]:
                    print("   ‚úÖ –£—á–∞—Å–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–≤")
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ CSV –∑ "Sent" –Ω–∞ "Answered"
                    print(
                        f"   üîç Debug: user_id –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É = {analysis['participant_id']}"
                    )
                    if self.update_csv_response_status(
                        csv_file,
                        analysis["participant_id"],
                        True,
                        analysis.get("participant_name"),
                        chat_id,
                    ):
                        print("   üìù –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'Answered' –≤ CSV")
                    else:
                        print("   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤ CSV")
                    stats["has_responses"] += 1
                    continue

                if analysis["needs_followup"]:
                    followup_type = analysis["followup_type"]
                    print(f"   üì® –ü–æ—Ç—Ä—ñ–±–µ–Ω follow-up: {followup_type}")

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ü–µ–π —Ç–∏–ø follow-up
                    already_sent = self.check_followup_already_sent(
                        csv_file, chat_id, followup_type
                    )

                    if already_sent:
                        print(
                            f"   ‚è≠Ô∏è Follow-up {followup_type} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
                        )
                        continue

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ follow-up
                    success = self.send_followup_message(
                        chat_id,
                        followup_type,
                        analysis["participant_name"] or "there",
                    )

                    if success:
                        print(f"   ‚úÖ Follow-up ({followup_type}) –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        stats[f"{followup_type}_sent"] += 1

                        # –û–Ω–æ–≤–ª—é—î–º–æ Follow-up —Å—Ç–∞—Ç—É—Å –≤ CSV
                        self.update_csv_followup_status(
                            csv_file, chat_id, followup_type
                        )

                        # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (2-5 —Å–µ–∫—É–Ω–¥)
                        message_delay = random.uniform(2.0, 5.0)
                        print(
                            f"   ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ {message_delay:.1f}—Å –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏..."
                        )
                        time.sleep(message_delay)
                    else:
                        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ follow-up")
                        stats["errors"] += 1
                else:
                    print("   ‚è≠Ô∏è Follow-up –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω")

            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Ç—É: {e}")
                stats["errors"] += 1

        # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–∏
        print(f"\nüìä –ü–Ü–î–°–£–ú–ö–ò FOLLOW-UP –ö–ê–ú–ü–ê–ù–Ü–á:")
        print(f"   üìã –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —á–∞—Ç—ñ–≤: {stats['analyzed']}")
        print(f"   üíæ chat_id –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {stats['chat_ids_stored']}")
        print(f"   ‚úÖ –ó –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏: {stats['has_responses']}")
        print(f"   üì® Follow-up 3 –¥–Ω—ñ: {stats['day_3_sent']}")
        print(f"   üì® Follow-up 7 –¥–Ω—ñ–≤: {stats['day_7_sent']}")
        print(f"   üì® –§—ñ–Ω–∞–ª—å–Ω–∏–π follow-up: {stats['final_sent']}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {stats['errors']}")

        total_sent = (
            stats["day_3_sent"] + stats["day_7_sent"] + stats["final_sent"]
        )
        print(f"   üìà –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")

        return stats

    def parse_date_flexible(self, date_str, current_date) -> datetime:
        """–ì–Ω—É—á–∫–µ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è –¥–∞—Ç —É —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        # Check for NaN values without requiring pandas in scope
        if (
            date_str is None
            or str(date_str).lower() in ["nan", "", "none"]
            or (
                hasattr(date_str, "__class__")
                and "float" in str(date_str.__class__)
                and str(date_str) == "nan"
            )
        ):
            return None

        date_str = str(date_str).strip()
        if not date_str:
            return None

        kyiv_tz = ZoneInfo("Europe/Kiev")

        try:
            # –§–æ—Ä–º–∞—Ç: "DD.MM.YYYY"
            if "." in date_str and len(date_str.split(".")) == 3:
                parts = date_str.split(".")
                if len(parts[2]) == 4:  # –ø–æ–≤–Ω–∏–π —Ä—ñ–∫
                    day, month, year = map(int, parts)
                    return datetime(year, month, day, tzinfo=kyiv_tz)
                elif len(parts[2]) == 2:  # —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ä—ñ–∫ (25 = 2025)
                    day, month, year = map(int, parts)
                    year = 2000 + year if year > 50 else 2000 + year
                    return datetime(year, month, day, tzinfo=kyiv_tz)

            # –§–æ—Ä–º–∞—Ç: "DD.MM" (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫)
            elif "." in date_str and len(date_str.split(".")) == 2:
                day, month = map(int, date_str.split("."))
                return datetime(current_date.year, month, day, tzinfo=kyiv_tz)

            # –§–æ—Ä–º–∞—Ç: "MM.DD" –∞–±–æ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
            else:
                # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ pandas
                if PANDAS_AVAILABLE:
                    parsed_date = pd.to_datetime(date_str, errors="coerce")
                    if not pd.isna(parsed_date):
                        return parsed_date.replace(tzinfo=kyiv_tz)

        except Exception:
            pass

        return None

    def get_filter_options(self, df) -> Dict:
        """–û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è"""
        positions = sorted(
            [
                pos
                for pos in df["position"].dropna().unique()
                if pos and str(pos) != "nan"
            ]
        )
        gaming_verticals = sorted(
            [
                gv
                for gv in df["gaming_vertical"].dropna().unique()
                if gv and str(gv) != "nan"
            ]
        )

        return {"positions": positions, "gaming_verticals": gaming_verticals}

    def apply_automatic_filters(
        self, df, enable_position_filter: bool = True
    ) -> pd.DataFrame:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏ —Ç–∞ gaming verticals"""
        print("\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–Ü –§–Ü–õ–¨–¢–†–ò")
        print("=" * 40)

        original_count = len(df)
        filtered_df = df.copy()

        # Filter by gaming_vertical (exclude "land")
        if "gaming_vertical" in filtered_df.columns:
            before_gv_filter = len(filtered_df)
            filtered_df = filtered_df[
                ~filtered_df["gaming_vertical"].str.contains(
                    "land", case=False, na=False
                )
            ]
            excluded_land = before_gv_filter - len(filtered_df)
            if excluded_land > 0:
                print(
                    f"üö´ –í–∏–∫–ª—é—á–µ–Ω–æ 'land' gaming vertical: -{excluded_land} –∑–∞–ø–∏—Å—ñ–≤"
                )

        # Filter by position (include key positions) - only if enabled
        if enable_position_filter:
            position_keywords = [
                "chief executive officer",
                "ceo",
                "chief operating officer",
                "coo",
                "chief financial officer",
                "cfo",
                "chief payments officer",
                "cpo",
                "payments",
                "psp",
                "operations",
                "business development",
                "partnerships",
                "relationship",
                "country manager",
            ]

            if "position" in filtered_df.columns:
                before_pos_filter = len(filtered_df)

                # Convert positions to lowercase for comparison
                filtered_df["position_lower"] = (
                    filtered_df["position"].str.lower().fillna("")
                )

                # Create mask for positions containing keywords
                position_mask = filtered_df["position_lower"].str.contains(
                    "|".join(position_keywords), case=False, na=False
                )

                # Exclude "coordinator" for COO
                coordinator_mask = filtered_df["position_lower"].str.contains(
                    "coordinator", case=False, na=False
                )
                coo_mask = filtered_df["position_lower"].str.contains(
                    "coo", case=False, na=False
                )

                # Apply filter
                filtered_df = filtered_df[
                    position_mask & ~(coo_mask & coordinator_mask)
                ]

                # Drop temporary column
                filtered_df = filtered_df.drop("position_lower", axis=1)

                excluded_positions = before_pos_filter - len(filtered_df)
                if excluded_positions > 0:
                    print(
                        f"üéØ –§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏: -{excluded_positions} –∑–∞–ø–∏—Å—ñ–≤"
                    )
                    print(
                        f"   –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {', '.join(position_keywords[:5])}..."
                    )
        else:
            print("‚ö†Ô∏è –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –≤–∏–º–∫–Ω–µ–Ω–æ - –≤–∫–ª—é—á–µ–Ω—ñ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó")

        total_excluded = original_count - len(filtered_df)
        print(
            f"‚úÖ –ó–∞–≥–∞–ª–æ–º –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(filtered_df)} –∑ {original_count} ({total_excluded} –≤–∏–∫–ª—é—á–µ–Ω–æ)"
        )

        return filtered_df

    def apply_user_filters(self, df) -> pd.DataFrame:
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ apply_automatic_filters)"""
        print("\nüîß –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –§–Ü–õ–¨–¢–†–Ü–í")
        print("=" * 40)

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó
        filter_options = self.get_filter_options(df)

        # –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
        print(
            f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó ({len(filter_options['positions'])} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤):"
        )
        for i, pos in enumerate(filter_options["positions"][:10], 1):
            print(f"   {i}. {pos}")
        if len(filter_options["positions"]) > 10:
            print(f"   ... —ñ —â–µ {len(filter_options['positions']) - 10}")

        pos_choice = input("\n‚û°Ô∏è –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é? (y/n): ").lower()
        position_filter = None
        if pos_choice == "y":
            pos_input = input(
                "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –ø–æ–∑–∏—Ü—ñ—ó (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –≤—Å—ñ—Ö): "
            ).strip()
            if pos_input:
                position_filter = pos_input.lower()

        # –§—ñ–ª—å—Ç—Ä –∑–∞ gaming vertical
        print(
            f"\nüéÆ –î–æ—Å—Ç—É–ø–Ω—ñ gaming verticals ({len(filter_options['gaming_verticals'])} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤):"
        )
        for i, gv in enumerate(filter_options["gaming_verticals"], 1):
            print(f"   {i}. {gv}")

        gv_choice = input(
            "\n‚û°Ô∏è –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ gaming vertical? (y/n): "
        ).lower()
        gaming_vertical_filter = None
        if gv_choice == "y":
            gv_input = input(
                "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ gaming vertical (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –≤—Å—ñ—Ö): "
            ).strip()
            if gv_input:
                gaming_vertical_filter = gv_input.lower()

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
        filtered_df = df.copy()

        if position_filter:
            mask = (
                filtered_df["position"]
                .str.lower()
                .str.contains(position_filter, na=False)
            )
            filtered_df = filtered_df[mask]
            print(
                f"‚úÖ –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é '{position_filter}': {len(filtered_df)} –∑–∞–ø–∏—Å—ñ–≤"
            )

        if gaming_vertical_filter:
            mask = (
                filtered_df["gaming_vertical"]
                .str.lower()
                .str.contains(gaming_vertical_filter, na=False)
            )
            filtered_df = filtered_df[mask]
            print(
                f"‚úÖ –§—ñ–ª—å—Ç—Ä –∑–∞ gaming vertical '{gaming_vertical_filter}': {len(filtered_df)} –∑–∞–ø–∏—Å—ñ–≤"
            )

        return filtered_df

    def get_followup_candidates_from_csv(
        self,
        csv_file: str = None,
        use_filters: bool = True,
        enable_position_filter: bool = True,
    ) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è follow-up –∑ CSV —Ñ–∞–π–ª—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è–º –¥–∞—Ç —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
        if not PANDAS_AVAILABLE:
            print("‚ùå pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É –ª–æ–≥—ñ–∫—É")
            return []

        if not csv_file:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        candidates = []

        try:
            if not os.path.exists(csv_file):
                print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return candidates

            df = pd.read_csv(csv_file)

            # –ë–∞–∑–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è - –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–ª—è follow-up
            base_mask = (
                (df["connected"] == "Sent")  # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                & (df["chat_id"].notna())  # –Ñ chat_id
                & (df["chat_id"] != "")  # chat_id –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
                & (  # –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –©–ï
                    (df["Follow-up"].isna())
                    | (df["Follow-up"] == "")
                    | (
                        ~df["Follow-up"].str.contains(
                            "answer", case=False, na=False
                        )
                    )
                )
            )

            filtered_df = df[base_mask]
            print(
                f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered_df)} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ —Å—Ç–∞—Ç—É—Å–æ–º 'Sent' –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
            )

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –∞–≤—Ç–æ—Ä–∞–º–∏
            if "author" in filtered_df.columns:
                author_counts = filtered_df["author"].value_counts()
                print(f"üìã –†–æ–∑–ø–æ–¥—ñ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ –∞–≤—Ç–æ—Ä–∞–º–∏:")
                for author, count in author_counts.items():
                    print(f"   ‚Ä¢ {author}: {count} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
            if use_filters and len(filtered_df) > 0:
                filtered_df = self.apply_automatic_filters(
                    filtered_df, enable_position_filter=enable_position_filter
                )
                print(
                    f"üìä –ü—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: {len(filtered_df)} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤"
                )

            # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –≤ –ö–∏—î–≤—ñ
            kyiv_tz = ZoneInfo("Europe/Kiev")
            current_date = datetime.now(kyiv_tz)

            for _, row in filtered_df.iterrows():
                # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                date_str = row.get("Date", "")

                sent_date = self.parse_date_flexible(date_str, current_date)
                if not sent_date:
                    continue

                days_since_sent = (current_date.date() - sent_date.date()).days

                # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ follow-up
                followup_date_str = row.get("follow_up_date", "")
                last_followup_date = self.parse_date_flexible(
                    followup_date_str, current_date
                )
                current_followup_type = row.get("Follow-up type", "")

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ç–∏–ø follow-up
                needs_followup = False
                followup_type = None

                # –ó–∞ 1 –¥–µ–Ω—å –¥–æ SBC (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
                sbc_date_kyiv = self.sbc_start_date.astimezone(kyiv_tz)
                days_until_sbc = (
                    sbc_date_kyiv.date() - current_date.date()
                ).days

                if days_until_sbc == 1 and current_followup_type != "final":
                    needs_followup = True
                    followup_type = "final"
                elif last_followup_date:
                    # –Ø–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π follow-up, —Ä–∞—Ö—É—î–º–æ –≤—ñ–¥ –Ω—å–æ–≥–æ
                    days_since_last_followup = (
                        current_date.date() - last_followup_date.date()
                    ).days

                    if (
                        current_followup_type == "follow-up_day_3"
                        and days_since_last_followup >= 4
                    ):
                        needs_followup = True
                        followup_type = "day_7"
                    elif (
                        current_followup_type == "follow-up_day_7"
                        and days_until_sbc == 1
                    ):
                        needs_followup = True
                        followup_type = "final"
                else:
                    # –ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ follow-up, —Ä–∞—Ö—É—î–º–æ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏
                    if days_since_sent >= 7:
                        needs_followup = True
                        followup_type = "day_7"
                    elif days_since_sent >= 3:
                        needs_followup = True
                        followup_type = "day_3"

                if needs_followup:
                    candidates.append(
                        {
                            "chat_id": row["chat_id"],
                            "full_name": row["full_name"],
                            "position": row.get("position", ""),
                            "gaming_vertical": row.get("gaming_vertical", ""),
                            "author": row.get(
                                "author", ""
                            ),  # Added author field
                            "user_id": self.extract_user_id_from_url(
                                row["source_url"]
                            ),
                            "days_since_sent": days_since_sent,
                            "followup_type": followup_type,
                            "sent_date": sent_date,
                            "last_followup_date": last_followup_date,
                            "current_followup_type": current_followup_type,
                        }
                    )

            print(f"üéØ –ó –Ω–∏—Ö {len(candidates)} –ø–æ—Ç—Ä–µ–±—É—é—Ç—å follow-up")
            return candidates

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {e}")
            return []

    def extract_user_id_from_url(self, source_url: str) -> str:
        """–í–∏—Ç—è–≥—É—î user_id –∑ source_url"""
        if not source_url:
            return ""
        try:
            # URL format: https://sbcconnect.com/event/sbc-summit-2025/attendees/{user_id}
            return source_url.split("/")[-1]
        except:
            return ""

    def process_followup_campaigns_optimized(
        self,
        account_key: str = None,
        use_filters: bool = True,
        enable_position_filter: bool = True,
    ) -> Dict[str, int]:
        """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ follow-up –∫–∞–º–ø–∞–Ω—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ CSV"""
        if account_key and account_key != self.current_account:
            print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –∞–∫–∞—É–Ω—Ç {account_key}...")
            if not self.switch_account(account_key):
                return {"error": 1}

        print(f"\nüì¨ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –û–ë–†–û–ë–ö–ê FOLLOW-UP –ö–ê–ú–ü–ê–ù–Ü–ô")
        print(f"üë§ –ê–∫–∞—É–Ω—Ç: {self.accounts[self.current_account]['name']}")
        print("=" * 50)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ CSV
        candidates = self.get_followup_candidates_from_csv(
            use_filters=use_filters,
            enable_position_filter=enable_position_filter,
        )

        if not candidates:
            print("‚úÖ –ù–µ–º–∞—î –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è follow-up")
            return {
                "total_candidates": 0,
                "analyzed": 0,
                "day_3_sent": 0,
                "day_7_sent": 0,
                "final_sent": 0,
                "status_updated": 0,
                "already_sent": 0,
                "errors": 0,
            }

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
        account_to_author_mapping = {
            "messenger1": [
                "Anton",
            ],  # messenger1 –æ–±—Å–ª—É–≥–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ Anton
            "messenger2": [
                "Yaroslav"
            ],  # messenger2 –æ–±—Å–ª—É–≥–æ–≤—É—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ Yaroslav
            "messenger3": ["Ihor"],  # messenger3 –æ–±—Å–ª—É–≥–æ–≤—É—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ Ihor
        }

        current_authors = account_to_author_mapping.get(account_key, [])
        if current_authors:
            original_count = len(candidates)

            # Debug: –ø–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∞–≤—Ç–æ—Ä—ñ–≤ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å follow-up
            authors_in_candidates = {}
            for c in candidates:
                author = c.get("author", "Unknown")
                authors_in_candidates[author] = (
                    authors_in_candidates.get(author, 0) + 1
                )

            print(f"üìã –ê–≤—Ç–æ—Ä–∏ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å follow-up:")
            for author, count in authors_in_candidates.items():
                print(f"   ‚Ä¢ {author}: {count} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")

            candidates = [
                c for c in candidates if c.get("author", "") in current_authors
            ]
            print(
                f"üìã –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∞–≤—Ç–æ—Ä–æ–º ({account_key} -> {current_authors}): {len(candidates)} –∑ {original_count} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤"
            )

        if not candidates:
            print(
                f"‚úÖ –ù–µ–º–∞—î –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è follow-up –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account_key}"
            )
            return {
                "total_candidates": 0,
                "analyzed": 0,
                "day_3_sent": 0,
                "day_7_sent": 0,
                "final_sent": 0,
                "status_updated": 0,
                "already_sent": 0,
                "errors": 0,
            }

        stats = {
            "total_candidates": len(candidates),
            "analyzed": 0,
            "day_3_sent": 0,
            "day_7_sent": 0,
            "final_sent": 0,
            "status_updated": 0,
            "already_sent": 0,
            "errors": 0,
        }

        # Load the chat list to get only accessible chats for current account
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Ç—ñ–≤...")
        chats_data = self.load_chats_list()

        if not chats_data:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–∞—Ç–∏")
            return {"error": 1}

        # Create a set of accessible chat IDs for quick lookup
        accessible_chat_ids = {
            chat.get("chatId") for chat in chats_data if chat.get("chatId")
        }
        print(
            f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(accessible_chat_ids)} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞"
        )

        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        for i, candidate in enumerate(candidates, 1):
            chat_id = candidate["chat_id"]
            full_name = candidate["full_name"]
            user_id = candidate["user_id"]
            followup_type = candidate["followup_type"]
            days_since = candidate["days_since_sent"]
            position = candidate.get("position", "")
            gaming_vertical = candidate.get("gaming_vertical", "")

            print(
                f"\n[{i}/{len(candidates)}] {full_name} (chat: {chat_id[:8]}...)"
            )
            print(f"   üëî –ü–æ–∑–∏—Ü—ñ—è: {position}")
            print(f"   üéÆ Gaming Vertical: {gaming_vertical}")
            print(f"   üìÖ –î–Ω—ñ–≤ –∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {days_since}")
            print(f"   üì® –¢–∏–ø follow-up: {followup_type}")

            # Check if this chat is accessible to current account
            if chat_id not in accessible_chat_ids:
                print(f"   ‚è≠Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –∞–∫–∞—É–Ω—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue

            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (1-3 —Å–µ–∫—É–Ω–¥–∏)
            delay = random.uniform(1.0, 3.0)
            print(f"   ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º...")
            time.sleep(delay)

            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
                chat_details = self.load_chat_details(chat_id)
                if not chat_details:
                    print(f"   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–∞—Ç")
                    stats["errors"] += 1
                    continue

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                analysis = self.analyze_chat_for_followup(chat_details)
                stats["analyzed"] += 1

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                if analysis["has_response"]:
                    print(f"   ‚úÖ –Ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ CSV –∑ "Sent" –Ω–∞ "Answered"
                    if self.update_csv_response_status(
                        csv_file, user_id, True, full_name, chat_id
                    ):
                        stats["status_updated"] += 1
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ü–µ–π —Ç–∏–ø follow-up
                already_sent = self.check_followup_already_sent(
                    csv_file, chat_id, followup_type
                )

                if already_sent:
                    print(
                        f"   ‚è≠Ô∏è Follow-up {followup_type} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
                    )
                    stats["already_sent"] += 1
                    continue

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ follow-up –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                first_name = (
                    full_name.split()[0] if full_name.split() else "there"
                )

                if self.send_followup_message(
                    chat_id, followup_type, first_name
                ):
                    print(f"   ‚úÖ Follow-up –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    stats[f"{followup_type}_sent"] += 1

                    # –û–Ω–æ–≤–ª—é—î–º–æ Follow-up —Å—Ç–∞—Ç—É—Å –≤ CSV
                    self.update_csv_followup_status(
                        csv_file, chat_id, followup_type
                    )

                    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (2-5 —Å–µ–∫—É–Ω–¥)
                    message_delay = random.uniform(2.0, 5.0)
                    print(
                        f"   ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ {message_delay:.1f}—Å –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏..."
                    )
                    time.sleep(message_delay)
                else:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ follow-up")
                    stats["errors"] += 1

            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
                stats["errors"] += 1

        # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–∏
        print(f"\nüìä –ü–Ü–î–°–£–ú–ö–ò –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–á FOLLOW-UP –ö–ê–ú–ü–ê–ù–Ü–á:")
        print(f"   üìã –ö–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ CSV: {stats['total_candidates']}")
        print(f"   üîç –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {stats['analyzed']}")
        print(f"   üì® Follow-up 3 –¥–Ω—ñ: {stats['day_3_sent']}")
        print(f"   üì® Follow-up 7 –¥–Ω—ñ–≤: {stats['day_7_sent']}")
        print(f"   üì® –§—ñ–Ω–∞–ª—å–Ω–∏–π follow-up: {stats['final_sent']}")
        print(f"   üîÑ –°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {stats['status_updated']}")
        print(f"   ‚è≠Ô∏è –í–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ: {stats['already_sent']}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {stats['errors']}")

        total_sent = (
            stats["day_3_sent"] + stats["day_7_sent"] + stats["final_sent"]
        )
        print(f"   üìà –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")

        return stats

    def process_followup_campaigns_by_author(
        self, enable_position_filter: bool = True
    ) -> Dict[str, int]:
        """Process follow-up campaigns split by author to avoid API permission errors"""
        print(f"\nüì¨ FOLLOW-UP –ö–ê–ú–ü–ê–ù–Ü–á –ü–û –ê–í–¢–û–†–ê–ú")
        print("=" * 50)

        # Load CSV data
        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not os.path.exists(csv_file):
            print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {"error": 1}

        try:
            import pandas as pd

            df = pd.read_csv(csv_file, encoding="utf-8")

            # Apply position filtering if enabled
            if enable_position_filter:
                print(f"üéØ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏...")
                original_count = len(df)
                df = self.apply_automatic_filters(
                    df, enable_position_filter=True
                )
                filtered_count = len(df)
                print(
                    f"üìä –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏: {filtered_count} –∑ {original_count} –∑–∞–ø–∏—Å—ñ–≤"
                )
            else:
                print("‚ö†Ô∏è –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –≤–∏–º–∫–Ω–µ–Ω–æ - –≤–∫–ª—é—á–µ–Ω—ñ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó")

            # Get current date in Kiev timezone
            from zoneinfo import ZoneInfo
            from datetime import datetime

            kiev_tz = ZoneInfo("Europe/Kiev")
            current_date = datetime.now(kiev_tz).date()

            # Split data by author (including historical data)
            daniil_data = df[
                df["author"] == "Daniil"
            ].copy()  # Historical data
            anton_data = df[df["author"] == "Anton"].copy()  # New data
            yaroslav_data = df[df["author"] == "Yaroslav"].copy()
            ihor_data = df[df["author"] == "Ihor"].copy()  # New data

            print(f"\nüìä –†–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö –ø–æ –∞–≤—Ç–æ—Ä–∞–º:")
            print(f"  Daniil (—ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ): {len(daniil_data)} –∑–∞–ø–∏—Å—ñ–≤")
            print(f"  Anton (–Ω–æ–≤—ñ): {len(anton_data)} –∑–∞–ø–∏—Å—ñ–≤")
            print(f"  Yaroslav: {len(yaroslav_data)} –∑–∞–ø–∏—Å—ñ–≤")
            print(f"  Ihor (–Ω–æ–≤—ñ): {len(ihor_data)} –∑–∞–ø–∏—Å—ñ–≤")

            total_stats = {
                "total_candidates": 0,
                "analyzed": 0,
                "day_3_sent": 0,
                "day_7_sent": 0,
                "final_sent": 0,
                "status_updated": 0,
                "already_sent": 0,
                "errors": 0,
            }

            # Process each author's data separately
            for author_name, author_data in [
                ("Daniil (—ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ)", daniil_data),
                ("Anton (–Ω–æ–≤—ñ)", anton_data),
                ("Yaroslav", yaroslav_data),
                ("Ihor (–Ω–æ–≤—ñ)", ihor_data),
            ]:
                if author_data.empty:
                    print(f"\n‚è≠Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {author_name}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
                    continue

                print(f"\nüîÑ –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è {author_name}...")

                # Switch to appropriate account
                if author_name in ["Daniil (—ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ)", "Anton (–Ω–æ–≤—ñ)"]:
                    if not self.switch_account("messenger1"):
                        print(
                            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç messenger1"
                        )
                        continue
                elif author_name == "Yaroslav":
                    if not self.switch_account("messenger2"):
                        print(
                            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç messenger2"
                        )
                        continue
                else:  # Ihor (–Ω–æ–≤—ñ)
                    if not self.switch_account("messenger3"):
                        print(
                            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç messenger3"
                        )
                        continue

                # Filter candidates who need follow-up based on date logic
                candidates_to_process = []

                for _, row in author_data.iterrows():
                    if pd.isna(row.get("follow_up_date")) or pd.isna(
                        row.get("chat_id")
                    ):
                        continue

                    try:
                        follow_up_date_str = str(row["follow_up_date"])
                        follow_up_date = (
                            datetime.strptime(follow_up_date_str, "%d.%m")
                            .replace(year=current_date.year)
                            .date()
                        )

                        # Handle year transition
                        if (
                            follow_up_date
                            < datetime(current_date.year, 3, 1).date()
                        ):
                            follow_up_date = follow_up_date.replace(
                                year=current_date.year + 1
                            )

                        if current_date >= follow_up_date:
                            candidates_to_process.append(row)

                    except (ValueError, TypeError) as e:
                        print(
                            f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –¥–ª—è {row.get('full_name', 'Unknown')}: {e}"
                        )
                        continue

                if not candidates_to_process:
                    print(
                        f"‚úÖ –ù–µ–º–∞—î –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è follow-up –æ–±—Ä–æ–±–∫–∏ –¥–ª—è {author_name} —Å—å–æ–≥–æ–¥–Ω—ñ"
                    )
                    continue

                print(
                    f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(candidates_to_process)} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è {author_name}"
                )
                total_stats["total_candidates"] += len(candidates_to_process)

                # Process each candidate
                for i, candidate in enumerate(candidates_to_process, 1):
                    try:
                        chat_id = str(candidate["chat_id"])
                        full_name = candidate.get("full_name", "Unknown")
                        follow_up_type = candidate.get(
                            "Follow-up type", "follow-up_day_7"
                        )

                        print(
                            f"  [{i}/{len(candidates_to_process)}] üîÑ –û–±—Ä–æ–±–ª—è—î–º–æ: {full_name} (Chat: {chat_id[:8]}...)"
                        )

                        # Add delay between requests
                        import time
                        import random

                        delay = random.uniform(1.0, 3.0)
                        time.sleep(delay)

                        # Load chat details
                        chat_details = self.load_chat_details(chat_id)
                        if not chat_details:
                            print(f"    ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–∞—Ç")
                            total_stats["errors"] += 1
                            continue

                        # Analyze chat for responses
                        analysis = self.analyze_chat_for_followup(chat_details)
                        total_stats["analyzed"] += 1

                        # Check if there's a response
                        if analysis["has_response"]:
                            print(f"    ‚úÖ –Ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                            # Update status in CSV from "Sent" to "Answered"
                            if self.update_csv_response_status(
                                csv_file,
                                candidate.get("user_id", ""),
                                True,
                                full_name,
                                chat_id,
                            ):
                                total_stats["status_updated"] += 1
                            continue

                        # Check if this follow-up type was already sent
                        already_sent = self.check_followup_already_sent(
                            csv_file, chat_id, follow_up_type
                        )
                        if already_sent:
                            print(
                                f"    ‚è≠Ô∏è Follow-up {follow_up_type} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
                            )
                            total_stats["already_sent"] += 1
                            continue

                        # Send follow-up message
                        first_name = (
                            full_name.split()[0]
                            if full_name.split()
                            else "there"
                        )

                        if self.send_followup_message(
                            chat_id, follow_up_type, first_name
                        ):
                            print(f"    ‚úÖ Follow-up –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            if "day_3" in follow_up_type:
                                total_stats["day_3_sent"] += 1
                            elif "day_7" in follow_up_type:
                                total_stats["day_7_sent"] += 1
                            elif "final" in follow_up_type:
                                total_stats["final_sent"] += 1

                            # Update Follow-up status in CSV
                            self.update_csv_followup_status(
                                csv_file, chat_id, follow_up_type
                            )

                            # Delay after sending message
                            message_delay = random.uniform(2.0, 5.0)
                            time.sleep(message_delay)
                        else:
                            print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ follow-up")
                            total_stats["errors"] += 1

                    except Exception as e:
                        print(
                            f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {candidate.get('full_name', 'Unknown')}: {e}"
                        )
                        total_stats["errors"] += 1

            # Print summary
            print(f"\nüìä –ó–ê–ì–ê–õ–¨–ù–Ü –ü–Ü–î–°–£–ú–ö–ò FOLLOW-UP –ö–ê–ú–ü–ê–ù–Ü–á:")
            print(
                f"   üìã –í—Å—å–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {total_stats['total_candidates']}"
            )
            print(f"   üîç –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {total_stats['analyzed']}")
            print(f"   üì® Follow-up 3 –¥–Ω—ñ: {total_stats['day_3_sent']}")
            print(f"   üì® Follow-up 7 –¥–Ω—ñ–≤: {total_stats['day_7_sent']}")
            print(f"   üì® –§—ñ–Ω–∞–ª—å–Ω–∏–π follow-up: {total_stats['final_sent']}")
            print(f"   üîÑ –°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {total_stats['status_updated']}")
            print(f"   ‚è≠Ô∏è –í–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ: {total_stats['already_sent']}")
            print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {total_stats['errors']}")

            total_sent = (
                total_stats["day_3_sent"]
                + total_stats["day_7_sent"]
                + total_stats["final_sent"]
            )
            print(f"   üìà –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")

            return total_stats

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ follow-up –∫–∞–º–ø–∞–Ω—ñ–π –ø–æ –∞–≤—Ç–æ—Ä–∞–º: {e}")
            import traceback

            traceback.print_exc()
            return {"error": 1}

    def extract_user_data_from_csv(
        self,
        csv_file: str,
        apply_filters: bool = True,
        enable_position_filter: bool = True,
    ) -> List[Dict[str, str]]:
        """–í–∏—Ç—è–≥—É—î user ID —Ç–∞ —ñ–º–µ–Ω–∞ –∑ CSV —Ñ–∞–π–ª—É –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
        user_data = []

        if not os.path.exists(csv_file):
            print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return user_data

        try:
            import pandas as pd

            # –ß–∏—Ç–∞—î–º–æ CSV —Ñ–∞–π–ª –∑ –±—ñ–ª—å—à —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            try:
                df = pd.read_csv(csv_file, encoding="utf-8")
                print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(df)}")
            except pd.errors.ParserError as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É CSV (—Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏): {e}")
                # –°–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    df = pd.read_csv(
                        csv_file,
                        encoding="utf-8",
                        quoting=1,
                        skipinitialspace=True,
                    )
                    print(
                        f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è): {len(df)}"
                    )
                except Exception as e2:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É CSV: {e2}")
                    print("üí° –°–ø—Ä–æ–±—É—î–º–æ –±–∞–∑–æ–≤—É –æ–±—Ä–æ–±–∫—É –±–µ–∑ pandas...")
                    raise ImportError("Fallback to basic CSV processing")
            except UnicodeDecodeError:
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è, —Å–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º...")
                try:
                    df = pd.read_csv(csv_file, encoding="latin-1")
                    print(
                        f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (latin-1): {len(df)}"
                    )
                except Exception as e3:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ —É—Å—ñ–º–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º–∏: {e3}")
                    raise ImportError("Fallback to basic CSV processing")

            if apply_filters:
                print("üîç –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏...")
                original_count = len(df)

                # 1. –§—ñ–ª—å—Ç—Ä –ø–æ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É –ø–æ–ª—é 'connected' (—è–∫—â–æ –∫–æ–ª–æ–Ω–∫–∞ —ñ—Å–Ω—É—î)
                if "connected" in df.columns:
                    df = df[df["connected"].isna() | (df["connected"] == "")]
                    print(
                        f"   –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É 'connected' (–ø–æ—Ä–æ–∂–Ω—î): {len(df)} –∑–∞–ø–∏—Å—ñ–≤"
                    )
                else:
                    print(
                        f"   –ö–æ–ª–æ–Ω–∫–∞ 'connected' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä"
                    )

                # 2. –§—ñ–ª—å—Ç—Ä –ø–æ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É –ø–æ–ª—é 'Follow-up' (—è–∫—â–æ –∫–æ–ª–æ–Ω–∫–∞ —ñ—Å–Ω—É—î)
                if "Follow-up" in df.columns:
                    df = df[df["Follow-up"].isna() | (df["Follow-up"] == "")]
                    print(
                        f"   –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É 'Follow-up' (–ø–æ—Ä–æ–∂–Ω—î): {len(df)} –∑–∞–ø–∏—Å—ñ–≤"
                    )
                else:
                    print(
                        f"   –ö–æ–ª–æ–Ω–∫–∞ 'Follow-up' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä"
                    )

                # 3. –§—ñ–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é 'valid' - –≤–∏–∫–ª—é—á–∞—î–º–æ –∑–∞–ø–∏—Å–∏ –∑ valid="false"
                if "valid" in df.columns:
                    before_valid_filter = len(df)
                    df = df[df["valid"] != "false"]
                    excluded_by_valid = before_valid_filter - len(df)
                    print(
                        f"   –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É 'valid' (–≤–∏–∫–ª—é—á–µ–Ω–æ invalid): {len(df)} –∑–∞–ø–∏—Å—ñ–≤ (-{excluded_by_valid} invalid)"
                    )
                else:
                    print(
                        f"   –ö–æ–ª–æ–Ω–∫–∞ 'valid' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä"
                    )

                # 4. –§—ñ–ª—å—Ç—Ä –ø–æ gaming_vertical (–±–µ–∑ "land")
                if "gaming_vertical" in df.columns:
                    df = df[
                        ~df["gaming_vertical"].str.contains(
                            "land", case=False, na=False
                        )
                    ]
                    print(
                        f"   –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É gaming_vertical (–±–µ–∑ 'land'): {len(df)} –∑–∞–ø–∏—Å—ñ–≤"
                    )

                # 5. –§—ñ–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü—ñ—ó (–º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞) - —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
                if enable_position_filter:
                    position_keywords = [
                        "chief executive officer",
                        "ceo",
                        "chief operating officer",
                        "coo",
                        "chief financial officer",
                        "cfo",
                        "chief payments officer",
                        "cpo",
                        "payments",
                        "psp",
                        "operations",
                        "business development",
                        "partnerships",
                        "relationship",
                        "country manager",
                    ]
                    if "position" in df.columns:
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                        df["position_lower"] = (
                            df["position"].str.lower().fillna("")
                        )

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∫—É –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π —â–æ –º—ñ—Å—Ç—è—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                        position_mask = df["position_lower"].str.contains(
                            "|".join(position_keywords), case=False, na=False
                        )

                        # –í–∏–∫–ª—é—á–∞—î–º–æ "coordinator" –¥–ª—è COO
                        coordinator_mask = df["position_lower"].str.contains(
                            "coordinator", case=False, na=False
                        )
                        coo_mask = df["position_lower"].str.contains(
                            "coo", case=False, na=False
                        )

                        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä: –≤–∫–ª—é—á–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∞–ª–µ –≤–∏–∫–ª—é—á–∞—î–º–æ coordinator –ø—Ä–∏ COO
                        df = df[position_mask & ~(coo_mask & coordinator_mask)]

                        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –∫–æ–ª–æ–Ω–∫—É
                        df = df.drop("position_lower", axis=1)

                        print(
                            f"   –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ–∑–∏—Ü—ñ—ó (–∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, –≤–∏–∫–ª—é—á–∞—é—á–∏ COO+coordinator): {len(df)} –∑–∞–ø–∏—Å—ñ–≤"
                        )
                else:
                    print(
                        "   –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –≤–∏–º–∫–Ω–µ–Ω–æ - –≤–∫–ª—é—á–µ–Ω—ñ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó"
                    )

                print(
                    f"üìä –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {original_count} ‚Üí {len(df)} –∑–∞–ø–∏—Å—ñ–≤"
                )

            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for _, row in df.iterrows():
                source_url = row.get("source_url", "")
                full_name = row.get("full_name", "")
                company_name = row.get("company_name", "")

                if source_url and full_name:
                    # –í–∏—Ç—è–≥—É—î–º–æ user ID –∑ URL
                    match = re.search(r"/attendees/([^/?]+)", source_url)
                    if match:
                        user_id = match.group(1)

                        # –í–∏—Ç—è–≥—É—î–º–æ –ø–µ—Ä—à–µ —ñ–º'—è
                        first_name = (
                            full_name.split()[0]
                            if full_name.split()
                            else "there"
                        )

                        user_data.append(
                            {
                                "user_id": user_id,
                                "first_name": first_name,
                                "full_name": full_name,
                                "company_name": company_name,
                            }
                        )

        except ImportError:
            print(
                "‚ö†Ô∏è pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É –æ–±—Ä–æ–±–∫—É..."
            )
            try:
                with open(csv_file, "r", encoding="utf-8") as f:
                    # –°–ø–æ—á–∞—Ç–∫—É —á–∏—Ç–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    first_line = f.readline().strip()
                    headers = first_line.split(",")

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
                    if (
                        "source_url" not in headers
                        or "full_name" not in headers
                    ):
                        print(
                            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ 'source_url' –∞–±–æ 'full_name'"
                        )
                        return user_data

                    source_url_idx = headers.index("source_url")
                    full_name_idx = headers.index("full_name")
                    company_name_idx = (
                        headers.index("company_name")
                        if "company_name" in headers
                        else -1
                    )

                    line_num = 1
                    for line in f:
                        line_num += 1
                        line = line.strip()
                        if not line:
                            continue

                        try:
                            # –ü—Ä–æ—Å—Ç–∏–π —Å–ø–ª—ñ—Ç –ø–æ –∫–æ–º—ñ (–º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–æ, –∞–ª–µ –∫—Ä–∞—â–µ –Ω—ñ–∂ –Ω—ñ—á–æ–≥–æ)
                            fields = line.split(",")

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–ª—ñ–≤
                            max_idx = max(source_url_idx, full_name_idx)
                            if company_name_idx > -1:
                                max_idx = max(max_idx, company_name_idx)

                            if len(fields) > max_idx:
                                source_url = (
                                    fields[source_url_idx].strip().strip('"')
                                )
                                full_name = (
                                    fields[full_name_idx].strip().strip('"')
                                )
                                company_name = (
                                    fields[company_name_idx].strip().strip('"')
                                    if company_name_idx > -1
                                    and len(fields) > company_name_idx
                                    else ""
                                )

                                if source_url and full_name:
                                    # –í–∏—Ç—è–≥—É—î–º–æ user ID –∑ URL
                                    match = re.search(
                                        r"/attendees/([^/?]+)", source_url
                                    )
                                    if match:
                                        user_id = match.group(1)

                                        # –í–∏—Ç—è–≥—É—î–º–æ –ø–µ—Ä—à–µ —ñ–º'—è
                                        first_name = (
                                            full_name.split()[0]
                                            if full_name.split()
                                            else "there"
                                        )

                                        user_data.append(
                                            {
                                                "user_id": user_id,
                                                "first_name": first_name,
                                                "full_name": full_name,
                                                "company_name": company_name,
                                            }
                                        )
                        except Exception as line_error:
                            print(
                                f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ä—è–¥–æ–∫ {line_num}: {str(line_error)[:50]}..."
                            )
                            continue

            except Exception as file_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {file_error}")
                try:
                    # –°–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
                    with open(csv_file, "r", encoding="latin-1") as f:
                        reader = csv.DictReader(f)
                        for row_num, row in enumerate(reader, 2):
                            try:
                                source_url = row.get("source_url", "")
                                full_name = row.get("full_name", "")

                                if source_url and full_name:
                                    # –í–∏—Ç—è–≥—É—î–º–æ user ID –∑ URL
                                    match = re.search(
                                        r"/attendees/([^/?]+)", source_url
                                    )
                                    if match:
                                        user_id = match.group(1)

                                        # –í–∏—Ç—è–≥—É—î–º–æ –ø–µ—Ä—à–µ —ñ–º'—è
                                        first_name = (
                                            full_name.split()[0]
                                            if full_name.split()
                                            else "there"
                                        )

                                        user_data.append(
                                            {
                                                "user_id": user_id,
                                                "first_name": first_name,
                                                "full_name": full_name,
                                            }
                                        )
                            except Exception as row_error:
                                print(
                                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ä—è–¥–æ–∫ {row_num}: {str(row_error)[:50]}..."
                                )
                                continue
                except Exception as final_error:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {final_error}")
                    return user_data

        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(user_data)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        return user_data

    def fix_malformed_csv(self, csv_file: str, backup: bool = True) -> bool:
        """–í–∏–ø—Ä–∞–≤–ª—è—î –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π CSV —Ñ–∞–π–ª"""
        import shutil

        if backup:
            backup_file = f"{csv_file}.backup"
            try:
                shutil.copy2(csv_file, backup_file)
                print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ backup: {backup_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ backup: {e}")

        try:
            fixed_rows = []

            with open(csv_file, "r", encoding="utf-8", errors="replace") as f:
                lines = f.readlines()

            if not lines:
                print("‚ùå –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")
                return False

            # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            header_line = lines[0].strip()
            headers = [h.strip().strip('"') for h in header_line.split(",")]
            expected_fields = len(headers)

            print(f"üìä –û—á—ñ–∫—É—î—Ç—å—Å—è {expected_fields} –ø–æ–ª—ñ–≤ –Ω–∞ —Ä—è–¥–æ–∫")
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers[:5])}...")

            fixed_rows.append(header_line)

            for line_num, line in enumerate(lines[1:], 2):
                line = line.strip()
                if not line:
                    continue

                # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–ª—è
                fields = line.split(",")

                if len(fields) == expected_fields:
                    # –†—è–¥–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
                    fixed_rows.append(line)
                elif len(fields) > expected_fields:
                    # –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–ª—ñ–≤ - –º–æ–∂–ª–∏–≤–æ –Ω–µ–∑–∞—Ö–∏—â–µ–Ω—ñ –∫–æ–º–∏ –≤ –¥–∞–Ω–∏—Ö
                    print(
                        f"‚ö†Ô∏è –†—è–¥–æ–∫ {line_num}: {len(fields)} –ø–æ–ª—ñ–≤ –∑–∞–º—ñ—Å—Ç—å {expected_fields}"
                    )

                    # –°–ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
                    fixed_line = ",".join(fields[:expected_fields])
                    fixed_rows.append(fixed_line)
                    print(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä—è–¥–æ–∫ {line_num}")
                else:
                    # –ó–∞–º–∞–ª–æ –ø–æ–ª—ñ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    print(
                        f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–æ–∫ {line_num}: —Ç—ñ–ª—å–∫–∏ {len(fields)} –ø–æ–ª—ñ–≤"
                    )
                    continue

            # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
            with open(csv_file, "w", encoding="utf-8", newline="") as f:
                for row in fixed_rows:
                    f.write(row + "\n")

            print(
                f"‚úÖ –§–∞–π–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ. –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(fixed_rows)-1} —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö"
            )
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return False

    def update_csv_with_messaging_status(
        self, csv_file: str, user_id: str, full_name: str, chat_id: str = None
    ):
        """–û–Ω–æ–≤–ª—é—î CSV —Ñ–∞–π–ª –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            # –ß–∏—Ç–∞—î–º–æ –≤–µ—Å—å CSV —Ñ–∞–π–ª
            import pandas as pd

            df = pd.read_csv(csv_file)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ user_id (–≤–∏—Ç—è–≥—É—î–º–æ –∑ source_url)
            mask = df["source_url"].str.contains(user_id, na=False)

            if mask.any():
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
                if self.current_account == "messenger1":
                    author = "Anton"
                elif self.current_account == "messenger2":
                    author = "Yaroslav"
                elif self.current_account == "messenger3":
                    author = "Ihor"
                else:
                    author = "System"

                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ d.mm –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
                kyiv_tz = ZoneInfo("Europe/Kiev")
                current_date = datetime.now(kyiv_tz).strftime("%-d.%m")

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è
                df.loc[mask, "connected"] = "Sent"
                df.loc[mask, "author"] = (
                    author  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ author –≤ author field
                )
                df.loc[mask, "Date"] = current_date

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ chat_id —è–∫—â–æ –Ω–∞–¥–∞–Ω–æ
                if chat_id:
                    df.loc[mask, "chat_id"] = chat_id

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
                df.to_csv(csv_file, index=False, encoding="utf-8")

                chat_info = f", chat_id={chat_id}" if chat_id else ""
                print(
                    f"       üìù CSV –æ–Ω–æ–≤–ª–µ–Ω–æ: connected=Sent, author={author}, date={current_date}{chat_info}"
                )
            else:
                print(
                    f"       ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è user_id {user_id} —É CSV"
                )

        except ImportError:
            print(f"       ‚ö†Ô∏è pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, CSV –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CSV: {e}")

    def update_csv_excluded_company(
        self, csv_file: str, user_id: str, full_name: str, company_name: str
    ):
        """–û–Ω–æ–≤–ª—é—î CSV —Ñ–∞–π–ª –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—á–∏ valid=false"""
        try:
            import pandas as pd
            from zoneinfo import ZoneInfo

            df = pd.read_csv(csv_file)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ user_id (–≤–∏—Ç—è–≥—É—î–º–æ –∑ source_url)
            mask = df["source_url"].str.contains(user_id, na=False)

            if mask.any():
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
                if self.current_account == "messenger1":
                    author = "Anton"
                elif self.current_account == "messenger2":
                    author = "Yaroslav"
                elif self.current_account == "messenger3":
                    author = "Ihor"
                else:
                    author = "System"

                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ d.mm –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
                kyiv_tz = ZoneInfo("Europe/Kiev")
                current_date = datetime.now(kyiv_tz).strftime("%-d.%m")

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó
                df.loc[mask, "connected"] = "Excluded"
                df.loc[mask, "valid"] = "false"  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —è–∫ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
                df.loc[mask, "Comment"] = f"Excluded company: {company_name}"
                df.loc[mask, "Date"] = current_date

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
                df.to_csv(csv_file, index=False, encoding="utf-8")

                print(
                    f"       üìù CSV –æ–Ω–æ–≤–ª–µ–Ω–æ: connected=Excluded, valid=false, company={company_name}"
                )
            else:
                print(
                    f"       ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è user_id {user_id} —É CSV"
                )

        except ImportError:
            print(f"       ‚ö†Ô∏è pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, CSV –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CSV: {e}")

    def create_csv_row_for_participant(
        self, csv_file: str, user_id: str, participant_name: str, chat_id: str
    ) -> bool:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –≤ CSV –¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞, —è–∫–æ–≥–æ –Ω–µ –±—É–ª–æ –≤ –ø–æ—á–∞—Ç–∫–æ–≤—ñ–π –±–∞–∑—ñ"""
        try:
            import pandas as pd
            from zoneinfo import ZoneInfo

            # –ß–∏—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π CSV
            df = pd.read_csv(csv_file)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            kyiv_tz = ZoneInfo("Europe/Kiev")
            current_date = datetime.now(kyiv_tz)

            new_row = {
                "full_name": participant_name,
                "company_name": "",
                "position": "",
                "linkedin_url": "",
                "facebook_url": "",
                "x_twitter_url": "",
                "other_socials": "",
                "other_contacts": "",
                "country": "",
                "responsibility": "",
                "gaming_vertical": "",
                "organization_type": "",
                "introduction": "",
                "source_url": f"https://sbcconnect.com/event/sbc-summit-2025/attendees/{user_id}",
                "profile_image_url": "",
                "connected": "Answered",  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —Ç–æ–π, —Ö—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–≤
                "Follow-up": "",
                "valid": "true",
                "author": "System",
                "Date": current_date.strftime("%d.%m.%Y"),
                "Follow-up type": "",
                "chat_id": chat_id,
                "follow_up_date": "",
                "Comment": "Auto-created from chat analysis",
            }

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–æ DataFrame
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
            df.to_csv(csv_file, index=False, encoding="utf-8")

            print(
                f"       ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è {participant_name} (user_id: {user_id})"
            )
            return True

        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤ CSV: {e}")
            return False

    def update_csv_response_status(
        self,
        csv_file: str,
        user_id: str,
        has_response: bool,
        participant_name: str = None,
        chat_id: str = None,
    ):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ CSV —Ñ–∞–π–ª—ñ –∑–∞ user_id, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
        try:
            import pandas as pd

            df = pd.read_csv(csv_file)
            print(f"       üîç Debug: —à—É–∫–∞—î–º–æ user_id '{user_id}' –≤ CSV")

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ user_id (–≤–∏—Ç—è–≥—É—î–º–æ –∑ source_url)
            mask = df["source_url"].str.contains(user_id, na=False)
            matching_records = mask.sum()
            print(
                f"       üîç Debug: –∑–Ω–∞–π–¥–µ–Ω–æ {matching_records} –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ç–∞–∫–∏–º user_id"
            )

            if mask.any():
                current_status = df.loc[mask, "connected"].iloc[0]
                print(f"       üîç Debug: –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å = '{current_status}'")

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑ "Sent" –Ω–∞ "Answered" —è–∫—â–æ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                if has_response and current_status == "Sent":
                    df.loc[mask, "connected"] = "Answered"

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
                    df.to_csv(csv_file, index=False, encoding="utf-8")

                    print(
                        f"       üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å: Sent ‚Üí Answered –¥–ª—è user_id {user_id}"
                    )
                    return True
                elif not has_response:
                    print(f"       ‚ÑπÔ∏è has_response=False, —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è")
                    return True
                elif current_status != "Sent":
                    print(
                        f"       ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å '{current_status}' != 'Sent', –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ"
                    )
                    return True
                else:
                    print(
                        f"       ‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–∏—á–∏–Ω–∞, —á–æ–º—É —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–∏–≤—Å—è"
                    )
                    return False
            else:
                print(
                    f"       ‚ö†Ô∏è –ó–∞–ø–∏—Å –∑ user_id '{user_id}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CSV"
                )

                # –Ø–∫—â–æ —î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞ —Ç–∞ chat_id, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
                if participant_name and chat_id and has_response:
                    print(
                        f"       üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞ {participant_name}"
                    )
                    return self.create_csv_row_for_participant(
                        csv_file, user_id, participant_name, chat_id
                    )
                else:
                    print(
                        f"       ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞"
                    )
                    return False

        except ImportError:
            print(f"       ‚ö†Ô∏è pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return False
        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            return False

    def update_csv_with_chat_id(
        self,
        csv_file: str,
        user_id: str,
        chat_id: str,
        participant_name: str = None,
    ):
        """–û–Ω–æ–≤–ª—é—î CSV —Ñ–∞–π–ª –∑ chat_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
        try:
            import pandas as pd

            df = pd.read_csv(csv_file)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ user_id (–≤–∏—Ç—è–≥—É—î–º–æ –∑ source_url)
            mask = df["source_url"].str.contains(user_id, na=False)

            if mask.any():
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î chat_id
                current_chat_id = df.loc[mask, "chat_id"].iloc[0]

                if (
                    pd.isna(current_chat_id)
                    or current_chat_id == ""
                    or current_chat_id != chat_id
                ):
                    # –û–Ω–æ–≤–ª—é—î–º–æ chat_id
                    df.loc[mask, "chat_id"] = chat_id

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
                    df.to_csv(csv_file, index=False, encoding="utf-8")

                    print(
                        f"       üìù –û–Ω–æ–≤–ª–µ–Ω–æ chat_id: {chat_id[:8]}... –¥–ª—è user_id {user_id}"
                    )
                    return True
                else:
                    print(
                        f"       ‚ÑπÔ∏è chat_id –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user_id {user_id}"
                    )
                    return True
            else:
                print(
                    f"       ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è user_id {user_id} —É CSV"
                )

                # –Ø–∫—â–æ —î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
                if participant_name:
                    print(
                        f"       üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞ {participant_name}"
                    )
                    return self.create_csv_row_for_participant(
                        csv_file, user_id, participant_name, chat_id
                    )
                else:
                    print(
                        f"       ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞"
                    )
                    return False

        except ImportError:
            print(f"       ‚ö†Ô∏è pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, chat_id –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return False
        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è chat_id: {e}")
            return False

    def update_csv_followup_status(
        self, csv_file: str, chat_id: str, followup_type: str
    ):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å Follow-up –≤ CSV —Ñ–∞–π–ª—ñ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"""
        try:
            import pandas as pd
            from zoneinfo import ZoneInfo

            df = pd.read_csv(csv_file)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ chat_id
            mask = df["chat_id"] == chat_id

            if mask.any():
                # –û–Ω–æ–≤–ª—é—î–º–æ Follow-up –∫–æ–ª–æ–Ω–∫—É
                df.loc[mask, "Follow-up"] = "true"

                # –û–Ω–æ–≤–ª—é—î–º–æ Follow-up type –∫–æ–ª–æ–Ω–∫—É
                if "Follow-up type" not in df.columns:
                    df["Follow-up type"] = ""
                df.loc[mask, "Follow-up type"] = f"follow-up_{followup_type}"

                # –í–ê–ñ–õ–ò–í–û: –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ follow-up
                kyiv_tz = ZoneInfo("Europe/Kiev")
                current_date = datetime.now(kyiv_tz)
                formatted_date = current_date.strftime("%d.%m.%Y")

                # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É follow_up_date —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
                if "follow_up_date" not in df.columns:
                    df["follow_up_date"] = ""

                df.loc[mask, "follow_up_date"] = formatted_date

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
                df.to_csv(csv_file, index=False, encoding="utf-8")

                print(
                    f"       üìù Follow-up —Å—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {followup_type}, –¥–∞—Ç–∞: {formatted_date}"
                )
                return True
            else:
                print(f"       ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –∑ chat_id {chat_id}")
                return False

        except ImportError:
            print(
                f"       ‚ö†Ô∏è pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, Follow-up —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ"
            )
            return False
        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Follow-up —Å—Ç–∞—Ç—É—Å—É: {e}")
            return False

    def check_message_already_sent_in_chat(
        self, chat_data: dict, followup_type: str
    ) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –≤ —á–∞—Ç—ñ"""
        if not chat_data or not isinstance(chat_data, dict):
            return False

        messages = chat_data.get("messages", [])
        if not messages:
            return False

        # Get current user ID to identify our messages
        current_user_id = self.accounts[self.current_account]["user_id"]

        # Get the template for this followup type
        if followup_type not in self.follow_up_templates:
            return False

        template = self.follow_up_templates[followup_type]

        # Extract key phrases to check for
        key_phrases = []
        if isinstance(template, dict):
            # Multi-language template
            for lang_template in template.values():
                # Extract distinctive phrases (without {name} placeholder)
                clean_template = lang_template.replace("{name}", "").strip()
                if len(clean_template) > 10:  # Only use substantial phrases
                    key_phrases.append(
                        clean_template[:30]
                    )  # First 30 chars as key phrase
        else:
            # Single language template
            clean_template = template.replace("{name}", "").strip()
            if len(clean_template) > 10:
                key_phrases.append(clean_template[:30])

        # Check our messages for these key phrases
        for msg in messages:
            if msg.get("userId") == current_user_id and msg.get("message"):
                message_text = msg.get("message", "")
                for phrase in key_phrases:
                    if phrase.lower() in message_text.lower():
                        return True

        return False

    def check_followup_already_sent(
        self,
        csv_file: str,
        chat_id: str,
        followup_type: str,
        chat_data: dict = None,
    ) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π follow-up —Ü—å–æ–≥–æ —Ç–∏–ø—É (CSV + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)"""
        try:
            import pandas as pd

            df = pd.read_csv(csv_file)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ chat_id
            mask = df["chat_id"] == chat_id

            if mask.any():
                # Check Follow-up type column first
                followup_type_col = df.loc[mask, "Follow-up type"].iloc[0]
                if pd.notna(followup_type_col) and followup_type in str(
                    followup_type_col
                ):
                    return True

            # Additional check: scan actual chat messages if chat_data provided
            if chat_data:
                return self.check_message_already_sent_in_chat(
                    chat_data, followup_type
                )

            return False

        except ImportError:
            return False
        except Exception as e:
            print(f"       ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ follow-up: {e}")
            return False

    def process_positive_conversation_followups(
        self, csv_file: str = None
    ) -> Dict[str, int]:
        """Processes positive conversations across all messaging accounts and sends conference followup"""
        if not csv_file:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not PANDAS_AVAILABLE:
            print("‚ùå pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–µ –º–æ–∂–µ–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ CSV")
            return {"error": 1}

        print(f"\nüì¨ –û–ë–†–û–ë–ö–ê –ü–û–ó–ò–¢–ò–í–ù–ò–• –†–û–ó–ú–û–í –î–õ–Ø CONFERENCE FOLLOWUP")
        print(f"üìÅ CSV —Ñ–∞–π–ª: {csv_file}")
        print("=" * 60)

        stats = {
            "total_accounts": 0,
            "total_chats_checked": 0,
            "positive_conversations": 0,
            "conference_followups_sent": 0,
            "already_sent": 0,
            "errors": 0,
            "language_detected": {"en": 0, "ua": 0, "ru": 0, "unknown": 0},
            "sentiment_analysis": {"positive": 0, "negative": 0, "neutral": 0},
            "accounts_processed": [],
        }

        # List of messenger accounts to check
        messenger_accounts = ["messenger1", "messenger2", "messenger3"]
        original_account = self.current_account

        try:
            # Load CSV to check which chats to examine
            import pandas as pd

            df = pd.read_csv(csv_file)

            # Filter for chats that have responses - check both "connected" and "Comment" columns
            responded_mask = (
                # Check connected column for "Answer" values
                df["connected"].str.contains("answer", case=False, na=False)
            )
            responded_chats = df[responded_mask]
            print(
                f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(responded_chats)} —á–∞—Ç—ñ–≤ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"
            )

            # Process each messenger account
            for account_key in messenger_accounts:
                if account_key not in self.accounts:
                    continue

                print(
                    f"\nüë§ –û–±—Ä–æ–±–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç: {self.accounts[account_key]['name']}"
                )

                # Switch to this account
                if not self.switch_account(account_key):
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ {account_key}")
                    stats["errors"] += 1
                    continue

                stats["total_accounts"] += 1
                stats["accounts_processed"].append(account_key)

                # Load chats for this account
                print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤...")
                chats_data = self.load_chats_list()

                if not chats_data:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–∞—Ç–∏")
                    stats["errors"] += 1
                    continue

                # Create mapping of chat_id to CSV data for quick lookup
                chat_id_to_csv = {}
                for _, row in responded_chats.iterrows():
                    if pd.notna(row.get("chat_id")):
                        chat_id_to_csv[str(row["chat_id"])] = row

                # Filter chats to only those with responses
                relevant_chats = [
                    chat
                    for chat in chats_data
                    if chat.get("chatId") in chat_id_to_csv
                ]
                total_chats_to_process = len(relevant_chats)
                processed_count = 0

                account_chats_checked = 0
                account_positive_found = 0
                account_followups_sent = 0

                print(
                    f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {total_chats_to_process} —á–∞—Ç—ñ–≤ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏"
                )

                # Check each chat for positive sentiment
                for chat in relevant_chats:
                    processed_count += 1
                    chat_id = chat.get("chatId")
                    if not chat_id:
                        continue

                    account_chats_checked += 1
                    stats["total_chats_checked"] += 1

                    # Load chat details
                    print(
                        f"üîç [{processed_count}/{total_chats_to_process}] –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç {chat_id}..."
                    )
                    chat_data = self.load_chat_details(chat_id)

                    if not chat_data:
                        print(
                            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —á–∞—Ç—É {chat_id}"
                        )
                        stats["errors"] += 1
                        continue

                    # Check if conference followup already sent (CSV + message check)
                    already_sent = self.check_followup_already_sent(
                        csv_file, chat_id, "conference_active", chat_data
                    )
                    if already_sent:
                        print(
                            f"‚è≠Ô∏è [{processed_count}/{total_chats_to_process}] Conference followup –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat {chat_id}"
                        )
                        stats["already_sent"] += 1
                        continue

                    # Analyze responses for sentiment
                    response_analysis = self.analyze_chat_for_responses(
                        chat_data
                    )

                    if not response_analysis["has_response"]:
                        continue

                    # Get full chat analysis including participant name
                    full_analysis = self.analyze_chat_responses(chat_data)

                    # Get all response messages from participant
                    messages = chat_data.get("messages", [])
                    current_user_id = self.accounts[self.current_account][
                        "user_id"
                    ]

                    participant_messages = []
                    for msg in messages:
                        if msg.get("userId") != current_user_id and msg.get(
                            "message"
                        ):
                            participant_messages.append(msg.get("message", ""))

                    if not participant_messages:
                        continue

                    # Analyze sentiment of all participant messages
                    combined_text = " ".join(participant_messages)
                    language = self.detect_language(combined_text)
                    sentiment = self.detect_positive_sentiment(
                        combined_text, language
                    )

                    # Update language stats
                    stats["language_detected"][language] = (
                        stats["language_detected"].get(language, 0) + 1
                    )

                    # Update sentiment stats
                    stats["sentiment_analysis"][
                        sentiment["sentiment_type"]
                    ] += 1

                    print(
                        f"     üìù –ú–æ–≤–∞: {language}, –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment['sentiment_type']} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {sentiment['confidence']:.2f})"
                    )

                    if sentiment["matched_keywords"]:
                        print(
                            f"     üéØ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {', '.join(sentiment['matched_keywords'][:3])}"
                        )

                    # If positive sentiment detected, send conference followup
                    if (
                        sentiment["is_positive"]
                        and sentiment["confidence"] >= 0.4
                    ):
                        stats["positive_conversations"] += 1
                        account_positive_found += 1

                        # Get participant name
                        participant_name = full_analysis.get(
                            "participant_name", ""
                        )

                        # Send conference followup message with language detection
                        print(
                            f"üì® –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ conference followup –¥–æ {participant_name or '–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ'} (–º–æ–≤–∞: {language})..."
                        )

                        # Use the updated send_followup_message method that handles language
                        if self.send_followup_message(
                            chat_id,
                            "conference_active",
                            participant_name,
                            language,
                        ):
                            print(
                                f"‚úÖ Conference followup –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                            )
                            stats["conference_followups_sent"] += 1
                            account_followups_sent += 1

                            # Update CSV with followup status
                            self.update_csv_followup_status(
                                csv_file, chat_id, "conference_active"
                            )

                        else:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ conference followup")
                            stats["errors"] += 1

                        # Longer delay between messages to avoid rate limits
                        delay = random.uniform(
                            5.0, 10.0
                        )  # Random delay 5-10 seconds
                        print(
                            f"       ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º..."
                        )
                        time.sleep(delay)

                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è {account_key}:")
                print(f"   üîç –ß–∞—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {account_chats_checked}")
                print(f"   ‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–º–æ–≤: {account_positive_found}")
                print(f"   üì® Followup –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {account_followups_sent}")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            traceback.print_exc()
            stats["errors"] += 1

        finally:
            # Return to original account
            if original_account != self.current_account:
                print(
                    f"\nüîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ {original_account}"
                )
                self.switch_account(original_account)

        # Print final summary
        print(f"\nüìä –ü–Ü–î–°–£–ú–ö–ò CONFERENCE FOLLOWUP –ö–ê–ú–ü–ê–ù–Ü–á:")
        print(f"   üë• –ê–∫–∞—É–Ω—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {stats['total_accounts']}")
        print(f"   üì¨ –ß–∞—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {stats['total_chats_checked']}")
        print(f"   ‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–º–æ–≤: {stats['positive_conversations']}")
        print(
            f"   üì® Conference followup –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['conference_followups_sent']}"
        )
        print(f"   ‚è≠Ô∏è –í–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ: {stats['already_sent']}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {stats['errors']}")
        print(f"   üîß –ê–∫–∞—É–Ω—Ç–∏: {', '.join(stats['accounts_processed'])}")

        print(f"\nüåç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–í–ò:")
        for lang, count in stats["language_detected"].items():
            print(f"   {lang}: {count}")

        print(f"\nüòä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–ù–¢–ò–ú–ï–ù–¢–£:")
        for sentiment, count in stats["sentiment_analysis"].items():
            print(f"   {sentiment}: {count}")

        success_rate = (
            (
                (
                    stats["conference_followups_sent"]
                    / max(stats["positive_conversations"], 1)
                )
                * 100
            )
            if stats["positive_conversations"] > 0
            else 0
        )
        print(f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {success_rate:.1f}%")

        return stats

    def check_all_responses_and_update_csv(
        self, csv_file: str = None
    ) -> Dict[str, int]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ —á–∞—Ç–∏ –∑ —É—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∞ –æ–Ω–æ–≤–ª—é—î CSV —Å—Ç–∞—Ç—É—Å
        –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ç—ñ–ª—å–∫–∏ —á–∞—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º Sent/Empty/True
        """
        if not csv_file:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not PANDAS_AVAILABLE:
            print("‚ùå pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–µ –º–æ–∂–µ–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ CSV")
            return {"error": 1}

        print(f"\nüì¨ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –í–Ü–î–ü–û–í–Ü–î–ï–ô –£ –ß–ê–¢–ê–•")
        print(f"üìÅ CSV —Ñ–∞–π–ª: {csv_file}")
        print("=" * 60)

        stats = {
            "total_accounts": 0,
            "total_chats_to_check": 0,
            "total_chats_checked": 0,
            "responses_found": 0,
            "csv_updated": 0,
            "errors": 0,
            "skipped_no_csv_match": 0,
            "skipped_already_answered": 0,
            "accounts_processed": [],
        }

        # –°–ø–∏—Å–æ–∫ messenger –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        messenger_accounts = ["messenger1", "messenger2", "messenger3"]
        original_account = self.current_account

        try:
            # –ß–∏—Ç–∞—î–º–æ CSV —Ñ–∞–π–ª
            if not os.path.exists(csv_file):
                print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return {"error": 1}

            df = pd.read_csv(csv_file)

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–ø–∏—Å–∏ —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            # –®—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "Sent", –ø–æ—Ä–æ–∂–Ω—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º, –∞–±–æ "True" (–∞–ª–µ –ù–ï "Sent Answer" –∞–±–æ –±—É–¥—å-—â–æ –∑ "answer")
            check_mask = (
                (
                    (df["connected"] == "Sent")
                    | (df["connected"].isna())
                    | (df["connected"] == "")
                    | (df["connected"] == "True")
                )
                & (
                    # –í–∏–∫–ª—é—á–∞—î–º–æ —Ç–∏—Ö, —Ö—Ç–æ –≤–∂–µ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–±—É–¥—å-—è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —â–æ –º—ñ—Å—Ç–∏—Ç—å "answer")
                    (
                        ~df["connected"].str.contains(
                            "answer", case=False, na=False
                        )
                    )
                )
                & (
                    # –Ü —Ç–∏—Ö, —É –∫–æ–≥–æ —î chat_id (–æ–∑–Ω–∞—á–∞—î —â–æ –∫–æ–Ω—Ç–∞–∫—Ç –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)
                    (df["chat_id"].notna())
                    & (df["chat_id"] != "")
                )
            )

            records_to_check = df[check_mask]

            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV –∑–∞–ø–∏—Å—ñ–≤:")
            print(f"   üìã –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {len(df)}")
            print(f"   ÔøΩ –î–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {len(records_to_check)}")
            print(
                f"   ‚úÖ –í–∂–µ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏: {len(df[df['connected'].str.contains('answer', case=False, na=False)])}"
            )

            if len(records_to_check) == 0:
                print("‚úÖ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
                return stats

            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É chat_id -> record –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
            chat_id_to_record = {}
            for _, record in records_to_check.iterrows():
                chat_id = record.get("chat_id")
                if chat_id and str(chat_id) != "nan":
                    chat_id_to_record[chat_id] = {
                        "full_name": record.get("full_name", ""),
                        "user_id": record.get("user_id", ""),
                        "connected": record.get("connected", ""),
                        "index": record.name,
                    }

            print(
                f"üìã –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(chat_id_to_record)} chat_id –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
            )
            stats["total_chats_to_check"] = len(chat_id_to_record)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω messenger –∞–∫–∞—É–Ω—Ç
            for account_key in messenger_accounts:
                if account_key not in self.accounts:
                    print(f"‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç {account_key} –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
                    continue

                print(
                    f"\nüë§ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫–∞—É–Ω—Ç: {self.accounts[account_key]['name']}"
                )
                print("-" * 50)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –∞–∫–∞—É–Ω—Ç
                if not self.switch_account(account_key):
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ {account_key}")
                    stats["errors"] += 1
                    continue

                stats["total_accounts"] += 1
                stats["accounts_processed"].append(account_key)

                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
                print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤...")
                chats_data = self.load_chats_list()

                if not chats_data:
                    print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–∞—Ç–∏")
                    stats["errors"] += 1
                    continue

                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —á–∞—Ç–∏, —è–∫—ñ —î –≤ –Ω–∞—à–æ–º—É CSV
                relevant_chats = []
                for chat in chats_data:
                    chat_id = chat.get("chatId")
                    if (
                        chat_id
                        and chat_id in chat_id_to_record
                        and chat.get("isSingleChat")
                    ):
                        relevant_chats.append(chat)

                print(
                    f"üìã –ó {len(chats_data)} —á–∞—Ç—ñ–≤, {len(relevant_chats)} –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                )

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —á–∞—Ç–∏
                for i, chat in enumerate(relevant_chats, 1):
                    chat_id = chat.get("chatId")
                    record_info = chat_id_to_record[chat_id]

                    print(
                        f"   [{i}/{len(relevant_chats)}] üë§ {record_info['full_name'][:30]}... (chat: {chat_id[:8]}...)"
                    )

                    # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É
                    delay = random.uniform(1.0, 2.0)
                    time.sleep(delay)

                    try:
                        stats["total_chats_checked"] += 1

                        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
                        chat_data = self.load_chat_details(chat_id)
                        if not chat_data:
                            print(f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —á–∞—Ç—É")
                            continue

                        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                        analysis = self.analyze_chat_for_responses(chat_data)

                        if analysis["has_response"]:
                            stats["responses_found"] += 1
                            participant_name = record_info["full_name"]
                            participant_id = record_info["user_id"]

                            print(f"       ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! üéâ")
                            print(
                                f"       üìÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {analysis['response_count']}"
                            )

                            # –û–Ω–æ–≤–ª—é—î–º–æ CSV —Å—Ç–∞—Ç—É—Å
                            if self.update_csv_response_status_by_chat_id(
                                csv_file,
                                chat_id,
                                True,
                                participant_name,
                                participant_id,
                            ):
                                stats["csv_updated"] += 1
                                print(
                                    f"       üìù CSV –æ–Ω–æ–≤–ª–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å -> 'Sent Answer'"
                                )
                            else:
                                print(f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ CSV")
                        else:
                            print(f"       üì≠ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î")

                    except Exception as e:
                        print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Ç—É: {e}")
                        stats["errors"] += 1

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞–∫–∞—É–Ω—Ç
            if original_account:
                print(
                    f"\nüîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞–∫–∞—É–Ω—Ç: {original_account}"
                )
                self.switch_account(original_account)

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            stats["errors"] += 1

        # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–∏
        print(f"\nüìä –ü–Ü–î–°–£–ú–ö–ò –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–á –ü–ï–†–ï–í–Ü–†–ö–ò –í–Ü–î–ü–û–í–Ü–î–ï–ô:")
        print(f"   üë• –ê–∫–∞—É–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {stats['total_accounts']}")
        print(f"   üéØ –ß–∞—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {stats['total_chats_to_check']}")
        print(
            f"   üì¨ –ß–∞—Ç—ñ–≤ —Ñ–∞–∫—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {stats['total_chats_checked']}"
        )
        print(f"   ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–Ω–∞–π–¥–µ–Ω–æ: {stats['responses_found']}")
        print(f"   üìù CSV –∑–∞–ø–∏—Å—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {stats['csv_updated']}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–º–∞—î –≤ CSV): {stats['skipped_no_csv_match']}")
        print(
            f"   ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–≤): {stats['skipped_already_answered']}"
        )
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {stats['errors']}")
        print(f"   üîß –ê–∫–∞—É–Ω—Ç–∏: {', '.join(stats['accounts_processed'])}")

        efficiency_rate = (
            (
                (stats["total_chats_checked"] / stats["total_chats_to_check"])
                * 100
            )
            if stats["total_chats_to_check"] > 0
            else 0
        )
        print(f"   üìà –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {efficiency_rate:.1f}%")

        return stats

    def analyze_chat_for_responses(self, chat_data: Dict) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î —á–∞—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–¥ —É—á–∞—Å–Ω–∏–∫–∞"""
        result = {
            "has_response": False,
            "participant_name": None,
            "participant_id": None,
            "response_count": 0,
            "first_response_date": None,
        }

        if not chat_data or not isinstance(chat_data, dict):
            return result

        messages = chat_data.get("messages", [])
        if not messages:
            return result

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_user_id = self.accounts[self.current_account]["user_id"]

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞ —á–∞—Ç—É
        if chat_data.get("isSingleChat") and chat_data.get("participants"):
            participants = chat_data.get("participants", [])
            for participant in participants:
                if participant.get("userId") != current_user_id:
                    result["participant_name"] = participant.get(
                        "fullName", ""
                    )
                    result["participant_id"] = participant.get("userId", "")
                    break

        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
        sorted_messages = sorted(
            messages, key=lambda x: x.get("createdDate", "")
        )

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —É—á–∞—Å–Ω–∏–∫–∞ (–Ω–µ –≤—ñ–¥ –Ω–∞—Å)
        response_messages = []
        for msg in sorted_messages:
            if msg.get("userId") != current_user_id and msg.get("userId"):
                response_messages.append(msg)

        if response_messages:
            result["has_response"] = True
            result["response_count"] = len(response_messages)

            # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            first_response_timestamp = self.parse_message_timestamp(
                response_messages[0].get("createdDate", "")
            )
            if first_response_timestamp:
                result["first_response_date"] = first_response_timestamp

        return result

    def detect_language(self, text: str) -> str:
        """Detects the language of a message using simple keyword matching"""
        if not text:
            return "unknown"

        text_lower = text.lower()

        # English keywords and patterns
        english_indicators = [
            "the",
            "and",
            "you",
            "that",
            "will",
            "with",
            "have",
            "this",
            "for",
            "not",
            "are",
            "but",
            "what",
            "all",
            "were",
            "they",
            "been",
            "said",
            "each",
            "which",
            "their",
            "time",
            "would",
            "about",
            "if",
            "up",
            "out",
            "many",
            "then",
            "them",
            "these",
            "so",
            "some",
            "her",
            "would",
            "make",
            "like",
            "into",
            "him",
            "has",
            "two",
            "more",
            "very",
            "after",
            "words",
            "long",
            "than",
            "first",
            "water",
            "been",
            "call",
            "who",
            "its",
            "now",
            "find",
            "long",
            "down",
            "day",
            "did",
            "get",
            "come",
            "made",
            "may",
            "part",
        ]

        # Ukrainian specific keywords
        ukrainian_indicators = [
            "—Ç–∞",
            "—â–æ",
            "–Ω–µ",
            "–Ω–∞",
            "–≤",
            "—è",
            "–∑",
            "–¥–æ",
            "–≤—ñ–¥",
            "–∑–∞",
            "–ø—Ä–æ",
            "–ø—ñ–¥",
            "–Ω–∞–¥",
            "–ø—Ä–∏",
            "–∞–±–æ",
            "–∞–ª–µ",
            "—Ü–µ",
            "—è–∫",
            "—Ç–∞–∫",
            "—É–∂–µ",
            "—Ç—É—Ç",
            "—Ç–∞–º",
            "–∫–æ–ª–∏",
            "–¥–µ",
            "—á–æ–º—É",
            "—Ö—Ç–æ",
            "—è–∫–∏–π",
            "—è–∫–∞",
            "—è–∫—ñ",
            "–¥–ª—è",
            "–±–µ–∑",
            "—á–µ—Ä–µ–∑",
            "–ø—ñ—Å–ª—è",
            "–ø–µ—Ä–µ–¥",
            "–º—ñ–∂",
            "—Å–µ—Ä–µ–¥",
            "–ø–æ–∑–∞",
            "–∫—Ä—ñ–º",
            "–æ–∫—Ä—ñ–º",
            "—Ä–∞–∑–æ–º",
            "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é",
            "—É–∫—Ä–∞—ó–Ω–∞",
            "–∫–∏—ó–≤",
            "–ª—å–≤—ñ–≤",
            "–æ–¥–µ—Å–∞",
            "—Ö–∞—Ä–∫—ñ–≤",
            "–¥–Ω—ñ–ø—Ä–æ",
        ]

        # Russian specific keywords
        russian_indicators = [
            "–∏",
            "–Ω–µ",
            "–Ω–∞",
            "–≤",
            "—è",
            "—Å",
            "–¥–æ",
            "–æ—Ç",
            "–∑–∞",
            "–ø—Ä–æ",
            "–ø–æ–¥",
            "–Ω–∞–¥",
            "–ø—Ä–∏",
            "–∏–ª–∏",
            "–Ω–æ",
            "—ç—Ç–æ",
            "–∫–∞–∫",
            "—Ç–∞–∫",
            "—É–∂–µ",
            "—Ç—É—Ç",
            "—Ç–∞–º",
            "–∫–æ–≥–¥–∞",
            "–≥–¥–µ",
            "–ø–æ—á–µ–º—É",
            "–∫—Ç–æ",
            "–∫–∞–∫–æ–π",
            "–∫–∞–∫–∞—è",
            "–∫–∞–∫–∏–µ",
            "–¥–ª—è",
            "–±–µ–∑",
            "—Ä—É—Å—Å–∫–∏–º",
            "—Ä–æ—Å—Å–∏—è",
            "–º–æ—Å–∫–≤–∞",
            "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥",
            "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
        ]

        # Count matches
        english_score = sum(
            1 for word in english_indicators if word in text_lower
        )
        ukrainian_score = sum(
            1 for word in ukrainian_indicators if word in text_lower
        )
        russian_score = sum(
            1 for word in russian_indicators if word in text_lower
        )

        # Check for specific Ukrainian characters
        has_ukrainian_chars = bool(re.search(r"[—ñ—ó—î“ë]", text_lower))

        # Check for Cyrillic characters
        has_cyrillic = bool(re.search(r"[–∞-—è—ë]", text_lower))

        # Determine language
        if has_ukrainian_chars or ukrainian_score > max(
            russian_score, english_score
        ):
            return "ua"
        elif has_cyrillic or russian_score > max(
            ukrainian_score, english_score
        ):
            return "ru"
        elif english_score > 0:
            return "en"
        else:
            # Fallback: if has Cyrillic but can't distinguish, default to Ukrainian
            if has_cyrillic:
                return "ua"
            return "unknown"

    def detect_positive_sentiment(
        self, text: str, language: str = "en"
    ) -> Dict:
        """Detects if a message has positive sentiment towards meeting/coming to the conference"""
        if not text:
            return {
                "is_positive": False,
                "confidence": 0.0,
                "matched_keywords": [],
            }

        text_lower = text.lower()
        matched_keywords = []

        if language == "en":
            positive_keywords = [
                # Definite positive responses
                "i will come",
                "i'll come",
                "will come",
                "coming to",
                "see you at",
                "visit you",
                "visiting your",
                "come to your",
                "drop by",
                "stop by",
                "looking forward",
                "excited to",
                "can't wait",
                "will visit",
                "will be there",
                "see you there",
                "meet you",
                "interested in",
                "would like to",
                "keen to",
                "happy to",
                "glad to",
                "sure",
                "definitely",
                "absolutely",
                "of course",
                "sounds good",
                "great",
                "excellent",
                "perfect",
                "wonderful",
                "awesome",
                "fantastic",
                "will attend",
                "planning to",
                "intending to",
                "will join",
                "count me in",
                "i'm in",
                "yes",
                "yep",
                "yeah",
                "certainly",
                "booth",
                "stand",
                "conference",
                "expo",
                "summit",
                "event",
                "meeting",
                "chat",
                "discuss",
                "talk",
                "connect",
                "network",
            ]

            # Negative indicators
            negative_keywords = [
                "not interested",
                "no thank",
                "not relevant",
                "not our",
                "not for us",
                "don't need",
                "already have",
                "not looking",
                "busy",
                "can't make",
                "won't be able",
                "unable to",
                "not attending",
                "skip",
                "pass",
                "not suitable",
                "not applicable",
                "not related",
                "unsubscribe",
                "remove me",
                "stop",
                "spam",
                "not going",
                "cancel",
                "decline",
            ]

        elif language == "ua":  # Ukrainian
            positive_keywords = [
                # Ukrainian positive responses
                "–ø—Ä–∏–π–¥—É",
                "–ø—Ä–∏—ó–∂–¥–∂—É",
                "–±—É–¥—É",
                "–∑—É—Å—Ç—Ä—ñ–Ω–µ–º–æ—Å—è",
                "–ø–æ–±–∞—á–∏–º–æ—Å—è",
                "–∑–∞–≤—ñ—Ç–∞—é",
                "–≤—ñ–¥–≤—ñ–¥–∞—é",
                "–∑–∞—Ö–æ–¥—å",
                "–∑–∞—Ö–æ–¥–∂—É",
                "—Ü—ñ–∫–∞–≤–æ",
                "—Ü—ñ–∫–∞–≤–∏—Ç—å",
                "—Ö–æ—á—É",
                "–ø–ª–∞–Ω—É—é",
                "–∑–±–∏—Ä–∞—é—Å—è",
                "–æ–±–æ–≤'—è–∑–∫–æ–≤–æ",
                "–∑–≤–∏—á–∞–π–Ω–æ",
                "—Ç–∞–∫",
                "–¥–æ–±—Ä–µ",
                "—á—É–¥–æ–≤–æ",
                "–≤—ñ–¥–º—ñ–Ω–Ω–æ",
                "—Å—É–ø–µ—Ä",
                "–∫–ª–∞—Å–Ω–æ",
                "–∫—Ä—É—Ç–æ",
                "–¥—É–∂–µ –¥–æ–±—Ä–µ",
                "—Å—Ç–µ–Ω–¥",
                "–±—É—Ç",
                "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è",
                "–µ–∫—Å–ø–æ",
                "—Å–∞–º—ñ—Ç",
                "–ø–æ–¥—ñ—è",
                "–∑—É—Å—Ç—Ä—ñ—á",
            ]

            negative_keywords = [
                "–Ω–µ —Ü—ñ–∫–∞–≤–∏—Ç—å",
                "–Ω–µ —Ç—Ä–µ–±–∞",
                "–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ",
                "–Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å",
                "–Ω–µ –¥–ª—è –Ω–∞—Å",
                "–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ",
                "–∑–∞–π–Ω—è—Ç–∏–π",
                "–Ω–µ –∑–º–æ–∂—É",
                "–Ω–µ –±—É–¥—É",
                "–ø—Ä–æ–ø—É—Å–∫–∞—é",
                "–Ω–µ –π–¥—É",
                "–≤—ñ–¥–ø–∏—Å–∫–∞",
                "–ø—Ä–∏–±—Ä–∞—Ç–∏",
                "—Å—Ç–æ–ø",
                "—Å–ø–∞–º",
                "—Å–∫–∞—Å—É–≤–∞—Ç–∏",
            ]

        elif language == "ru":  # Russian
            positive_keywords = [
                # Russian positive responses
                "–ø—Ä–∏–¥—É",
                "–ø—Ä–∏–µ–¥—É",
                "–±—É–¥—É",
                "–≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è",
                "—É–≤–∏–¥–∏–º—Å—è",
                "–∑–∞–π–¥—É",
                "–ø–æ—Å–µ—â—É",
                "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
                "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                "—Ö–æ—á—É",
                "–ø–ª–∞–Ω–∏—Ä—É—é",
                "—Å–æ–±–∏—Ä–∞—é—Å—å",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
                "–∫–æ–Ω–µ—á–Ω–æ",
                "–¥–∞",
                "—Ö–æ—Ä–æ—à–æ",
                "–æ—Ç–ª–∏—á–Ω–æ",
                "—Å—É–ø–µ—Ä",
                "—Å—Ç–µ–Ω–¥",
                "–±—É—Ç",
                "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è",
                "—ç–∫—Å–ø–æ",
                "—Å–∞–º–º–∏—Ç",
                "—Å–æ–±—ã—Ç–∏–µ",
                "–≤—Å—Ç—Ä–µ—á–∞",
            ]

            negative_keywords = [
                "–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                "–Ω–µ –Ω—É–∂–Ω–æ",
                "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç",
                "–Ω–µ –¥–ª—è –Ω–∞—Å",
                "–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ",
                "–∑–∞–Ω—è—Ç",
                "–Ω–µ —Å–º–æ–≥—É",
                "–Ω–µ –±—É–¥—É",
                "–ø—Ä–æ–ø—É—Å–∫–∞—é",
                "–Ω–µ –∏–¥—É",
                "–æ—Ç–ø–∏—Å–∫–∞",
                "—É–±—Ä–∞—Ç—å",
                "—Å—Ç–æ–ø",
                "—Å–ø–∞–º",
                "–æ—Ç–º–µ–Ω–∏—Ç—å",
            ]

        else:  # fallback for unknown languages - combine all
            positive_keywords = [
                # English
                "i will come",
                "will come",
                "see you at",
                "visit you",
                "interested in",
                "definitely",
                "yes",
                "great",
                "perfect",
                "conference",
                "booth",
                "stand",
                # Ukrainian
                "–ø—Ä–∏–π–¥—É",
                "–±—É–¥—É",
                "—Ü—ñ–∫–∞–≤–æ",
                "–ø–ª–∞–Ω—É—é",
                "—Ç–∞–∫",
                "–¥–æ–±—Ä–µ",
                "—á—É–¥–æ–≤–æ",
                # Russian
                "–ø—Ä–∏–¥—É",
                "–±—É–¥—É",
                "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
                "—Ö–æ—á—É",
                "–¥–∞",
                "—Ö–æ—Ä–æ—à–æ",
                "–æ—Ç–ª–∏—á–Ω–æ",
            ]

            negative_keywords = [
                # English
                "not interested",
                "not relevant",
                "busy",
                "not going",
                # Ukrainian
                "–Ω–µ —Ü—ñ–∫–∞–≤–∏—Ç—å",
                "–Ω–µ —Ç—Ä–µ–±–∞",
                "–Ω–µ –±—É–¥—É",
                "–Ω–µ –π–¥—É",
                # Russian
                "–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                "–Ω–µ –Ω—É–∂–Ω–æ",
                "–Ω–µ –±—É–¥—É",
                "–Ω–µ –∏–¥—É",
            ]

        # Check for positive keywords
        for keyword in positive_keywords:
            if keyword in text_lower:
                matched_keywords.append(keyword)

        # Check for negative keywords (they override positive)
        negative_matches = []
        for keyword in negative_keywords:
            if keyword in text_lower:
                negative_matches.append(keyword)

        # Calculate sentiment
        if negative_matches:
            return {
                "is_positive": False,
                "confidence": 0.9,
                "matched_keywords": negative_matches,
                "sentiment_type": "negative",
            }
        elif matched_keywords:
            confidence = min(len(matched_keywords) * 0.3 + 0.4, 1.0)
            return {
                "is_positive": True,
                "confidence": confidence,
                "matched_keywords": matched_keywords,
                "sentiment_type": "positive",
            }
        else:
            return {
                "is_positive": False,
                "confidence": 0.0,
                "matched_keywords": [],
                "sentiment_type": "neutral",
            }

    def update_csv_response_status_by_chat_id(
        self,
        csv_file: str,
        chat_id: str,
        has_response: bool,
        participant_name: str = None,
        participant_id: str = None,
    ) -> bool:
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ CSV —Ñ–∞–π–ª—ñ –∑–∞ chat_id"""
        try:
            if not PANDAS_AVAILABLE:
                return False

            df = pd.read_csv(csv_file)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å –∑–∞ chat_id
            mask = df["chat_id"] == chat_id

            if mask.any():
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if has_response:
                    df.loc[mask, "connected"] = "Sent Answer"
                    # –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ Follow-up –∫–æ–ª–æ–Ω–∫—É
                    df.loc[mask, "Follow-up"] = "Answer"

                    # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    kyiv_tz = ZoneInfo("Europe/Kiev")
                    current_date = datetime.now(kyiv_tz)
                    date_str = f"{current_date.day}.{current_date.month:02d}"
                    df.loc[mask, "Date"] = date_str

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π CSV
                df.to_csv(csv_file, index=False)
                return True
            else:
                # –Ø–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ chat_id, –º–æ–∂–µ–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ –∑–∞ participant_id
                if participant_id:
                    source_mask = df["source_url"].str.contains(
                        participant_id, na=False
                    )
                    if source_mask.any():
                        if has_response:
                            df.loc[source_mask, "connected"] = "Sent Answer"
                            df.loc[source_mask, "Follow-up"] = "Answer"
                            df.loc[source_mask, "chat_id"] = (
                                chat_id  # –û–Ω–æ–≤–ª—é—î–º–æ chat_id
                            )

                            # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                            kyiv_tz = ZoneInfo("Europe/Kiev")
                            current_date = datetime.now(kyiv_tz)
                            date_str = (
                                f"{current_date.day}.{current_date.month:02d}"
                            )
                            df.loc[source_mask, "Date"] = date_str

                        df.to_csv(csv_file, index=False)
                        return True

                return False

        except Exception as e:
            print(f"       ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CSV: {e}")
            return False

    def bulk_message_users_from_csv(
        self,
        csv_file: str,
        delay_seconds: int = 3,
        user_limit: int = None,
        enable_position_filter: bool = True,
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ CSV —Ñ–∞–π–ª—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π"""
        print(f"\nüì¨ –†–û–ó–°–ò–õ–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ó –§–ê–ô–õ–£: {csv_file}")
        print(f"üö´ –í–∏–∫–ª—é—á–µ–Ω–æ –∫–æ–º–ø–∞–Ω—ñ–π: {len(self.excluded_companies)}")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —á–∞—Ç–∏
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —á–∞—Ç–∏...")
        self.load_chats_list()

        # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ CSV
        user_data = self.extract_user_data_from_csv(
            csv_file,
            apply_filters=True,
            enable_position_filter=enable_position_filter,
        )

        if not user_data:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            return 0, 0

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if user_limit and user_limit > 0:
            if len(user_data) > user_limit:
                original_count = len(user_data)
                user_data = user_data[:user_limit]
                print(
                    f"üî¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª—ñ–º—ñ—Ç: –æ–±—Ä–æ–±–ª—è—Ç–∏–º–µ–º–æ {user_limit} –∑ {original_count} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
                )

        success_count = 0
        failed_count = 0
        skipped_count = 0
        excluded_count = 0

        for i, user_info in enumerate(user_data, 1):
            user_id = user_info["user_id"]
            first_name = user_info["first_name"]
            full_name = user_info["full_name"]
            company_name = user_info.get("company_name", "")

            company_info = f" ({company_name})" if company_name else ""
            print(
                f"\n[{i}/{len(user_data)}] –û–±—Ä–æ–±–ª—è—î–º–æ {full_name}{company_info} (ID: {user_id})..."
            )

            try:
                # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —à–∞–±–ª–æ–Ω—ñ–≤ —Ç–∞ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–º'—è
                message_template = random.choice(self.follow_up_messages)
                message = message_template.format(name=first_name)

                print(
                    f"   üí¨ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ: '{message_template[:50]}...' –∑ —ñ–º'—è–º '{first_name}'"
                )
                print(
                    f"   üí¨ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π follow-up: '{self.second_follow_up_message}'"
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º follow-up —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —á–∞—Ç—É)
                success = self.send_message_to_user(
                    user_id, message, full_name, company_name
                )

                if success == "success":
                    print(f"   ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    success_count += 1
                elif success == "already_contacted":
                    print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—á–∞—Ç –≤–∂–µ –º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
                    skipped_count += 1
                elif success == "excluded_company":
                    print(f"   üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∫–æ–º–ø–∞–Ω—ñ—è –≤–∏–∫–ª—é—á–µ–Ω–∞)")
                    excluded_count += 1
                else:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
                    failed_count += 1

                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                if i < len(user_data):
                    print(f"   ‚è±Ô∏è –ß–µ–∫–∞—î–º–æ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay_seconds)

            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                failed_count += 1

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –†–û–ó–°–ò–õ–ö–ò:")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—á–∞—Ç —ñ—Å–Ω—É—î): {skipped_count}")
        print(f"   üö´ –í–∏–∫–ª—é—á–µ–Ω–æ (–∫–æ–º–ø–∞–Ω—ñ—è): {excluded_count}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}")
        print(
            f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(success_count/(success_count+failed_count)*100):.1f}%"
            if (success_count + failed_count) > 0
            else "N/A"
        )

        return success_count, failed_count

    def bulk_message_multi_account(
        self,
        csv_file: str,
        delay_seconds: int = 3,
        user_limit: int = None,
        enable_position_filter: bool = True,
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ CSV —Ñ–∞–π–ª—É —Ä–æ–∑–ø–æ–¥—ñ–ª—è—é—á–∏ –¥–∞–Ω—ñ –º—ñ–∂ —Ç—Ä—å–æ–º–∞ messenger –∞–∫–∞—É–Ω—Ç–∞–º–∏"""
        print(
            f"\nüì¨ –†–û–ó–°–ò–õ–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ó –¢–†–¨–û–• MESSENGER –ê–ö–ê–£–ù–¢–Ü–í: {csv_file}"
        )

        # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ CSV
        user_data = self.extract_user_data_from_csv(
            csv_file,
            apply_filters=True,
            enable_position_filter=enable_position_filter,
        )

        if not user_data:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            return 0, 0

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if user_limit and user_limit > 0:
            if len(user_data) > user_limit:
                user_data = user_data[:user_limit]
                original_count = len(
                    self.extract_user_data_from_csv(
                        csv_file,
                        apply_filters=True,
                        enable_position_filter=enable_position_filter,
                    )
                )
                print(
                    f"üî¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª—ñ–º—ñ—Ç: –æ–±—Ä–æ–±–ª—è—Ç–∏–º–µ–º–æ {user_limit} –∑ {original_count} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
                )

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –¥–∞–Ω—ñ –º—ñ–∂ —Ç—Ä—å–æ–º–∞ messenger –∞–∫–∞—É–Ω—Ç–∞–º–∏
        total_users = len(user_data)
        third_point = total_users // 3
        two_thirds_point = (total_users * 2) // 3

        messenger1_data = user_data[:third_point]
        messenger2_data = user_data[third_point:two_thirds_point]
        messenger3_data = user_data[two_thirds_point:]

        print(f"üìä –†–æ–∑–ø–æ–¥—ñ–ª –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:")
        print(
            f"   üë§ Messenger1 ({self.accounts['messenger1']['name']}): {len(messenger1_data)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
        )
        print(
            f"   üë§ Messenger2 ({self.accounts['messenger2']['name']}): {len(messenger2_data)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
        )
        print(
            f"   üë§ Messenger3 ({self.accounts['messenger3']['name']}): {len(messenger3_data)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
        )

        total_success = 0
        total_failed = 0

        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–∏–º messenger –∞–∫–∞—É–Ω—Ç–æ–º
        if messenger1_data:
            print(f"\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ Messenger1...")
            self.switch_account("messenger1")
            success, failed = self._process_user_batch(
                messenger1_data, delay_seconds, "Messenger1"
            )
            total_success += success
            total_failed += failed

        # –û–±—Ä–æ–±–ª—è—î–º–æ –¥—Ä—É–≥–∏–º messenger –∞–∫–∞—É–Ω—Ç–æ–º
        if messenger2_data:
            print(f"\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ Messenger2...")
            self.switch_account("messenger2")

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤
            print(f"   ‚è±Ô∏è –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞...")
            time.sleep(5)

            success, failed = self._process_user_batch(
                messenger2_data, delay_seconds, "Messenger2"
            )
            total_success += success
            total_failed += failed

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—Ä–µ—Ç—ñ–º messenger –∞–∫–∞—É–Ω—Ç–æ–º
        if messenger3_data:
            print(f"\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ Messenger3...")
            self.switch_account("messenger3")

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤
            print(f"   ‚è±Ô∏è –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞...")
            time.sleep(5)

            success, failed = self._process_user_batch(
                messenger3_data, delay_seconds, "Messenger3"
            )
            total_success += success
            total_failed += failed

        print(f"\nüìä –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–Ü–î–°–£–ú–û–ö:")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {total_success}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {total_failed}")
        print(
            f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(total_success/(total_success+total_failed)*100):.1f}%"
            if (total_success + total_failed) > 0
            else "N/A"
        )

        return total_success, total_failed

    def bulk_message_custom_accounts(
        self,
        csv_file: str,
        selected_accounts: list,
        delay_seconds: int = 3,
        user_limit: int = None,
        enable_position_filter: bool = True,
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ CSV —Ñ–∞–π–ª—É —Ä–æ–∑–ø–æ–¥—ñ–ª—è—é—á–∏ –¥–∞–Ω—ñ –º—ñ–∂ –≤–∏–±—Ä–∞–Ω–∏–º–∏ messenger –∞–∫–∞—É–Ω—Ç–∞–º–∏"""
        print(
            f"\nüì¨ –†–û–ó–°–ò–õ–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ó –í–ò–ë–†–ê–ù–ò–• MESSENGER –ê–ö–ê–£–ù–¢–Ü–í: {csv_file}"
        )

        account_names = [
            self.accounts[acc]["name"] for acc in selected_accounts
        ]
        print(f"üéØ –í–∏–±—Ä–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏: {', '.join(account_names)}")

        # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ CSV
        user_data = self.extract_user_data_from_csv(
            csv_file,
            apply_filters=True,
            enable_position_filter=enable_position_filter,
        )

        if not user_data:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            return 0, 0

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if user_limit and user_limit > 0:
            if len(user_data) > user_limit:
                user_data = user_data[:user_limit]
                original_count = len(
                    self.extract_user_data_from_csv(
                        csv_file,
                        apply_filters=True,
                        enable_position_filter=enable_position_filter,
                    )
                )
                print(
                    f"üî¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª—ñ–º—ñ—Ç: –æ–±—Ä–æ–±–ª—è—Ç–∏–º–µ–º–æ {user_limit} –∑ {original_count} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
                )

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –¥–∞–Ω—ñ –º—ñ–∂ –≤–∏–±—Ä–∞–Ω–∏–º–∏ messenger –∞–∫–∞—É–Ω—Ç–∞–º–∏
        total_users = len(user_data)
        num_accounts = len(selected_accounts)

        # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        user_batches = []
        users_per_batch = total_users // num_accounts
        remainder = total_users % num_accounts

        start_idx = 0
        for i, account_key in enumerate(selected_accounts):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫ –ø–µ—Ä–≤—ã–º remainder –±–∞—Ç—á–∞–º
            batch_size = users_per_batch + (1 if i < remainder else 0)
            end_idx = start_idx + batch_size
            batch_data = user_data[start_idx:end_idx]
            user_batches.append((account_key, batch_data))
            start_idx = end_idx

        print(f"üìä –†–æ–∑–ø–æ–¥—ñ–ª –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:")
        for account_key, batch_data in user_batches:
            account_name = self.accounts[account_key]["name"]
            print(
                f"   üë§ {account_key} ({account_name}): {len(batch_data)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
            )

        total_success = 0
        total_failed = 0

        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–∏–º –≤–∏–±—Ä–∞–Ω–∏–º –∞–∫–∞—É–Ω—Ç–æ–º
        for i, (account_key, batch_data) in enumerate(user_batches):
            if batch_data:
                print(f"\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ {account_key}...")
                self.switch_account(account_key)

                if (
                    i > 0
                ):  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ (–∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ)
                    print(
                        f"   ‚è±Ô∏è –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞..."
                    )
                    time.sleep(5)

                account_name = self.accounts[account_key]["name"].replace(
                    "Messenger Account ", "Messenger"
                )
                success, failed = self._process_user_batch(
                    batch_data, delay_seconds, account_name
                )
                total_success += success
                total_failed += failed

        print(f"\nüìä –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–Ü–î–°–£–ú–û–ö:")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {total_success}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {total_failed}")
        print(
            f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(total_success/(total_success+total_failed)*100):.1f}%"
            if (total_success + total_failed) > 0
            else "N/A"
        )

        return total_success, total_failed

    def switch_account(self, account_key):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞—î –Ω–∞ —ñ–Ω—à–∏–π –∞–∫–∞—É–Ω—Ç"""
        if account_key not in self.accounts:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∞–∫–∞—É–Ω—Ç: {account_key}")
            return False

        if self.current_account == account_key:
            print(f"‚ÑπÔ∏è –í–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è {account_key}")
            return True

        print(
            f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –∑ {self.current_account} –Ω–∞ {account_key}..."
        )

        # –°–ø–æ—á–∞—Ç–∫—É –≤–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
        if self.current_account is not None:
            self.logout()

        # –¢–µ–ø–µ—Ä –ª–æ–≥—ñ–Ω–∏–º–æ—Å—è –∑ –Ω–æ–≤–∏–º –∞–∫–∞—É–Ω—Ç–æ–º
        success = self.login(account_key)
        if success:
            print(
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ {self.accounts[account_key]['name']}"
            )
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ {account_key}")
            return False

    def _process_user_batch(self, user_data, delay_seconds, account_name):
        """–û–±—Ä–æ–±–ª—è—î –≥—Ä—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π"""
        print(f"\nüì¨ –û–±—Ä–æ–±–∫–∞ {len(user_data)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è {account_name}")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —á–∞—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —á–∞—Ç–∏...")
        self.load_chats_list()

        success_count = 0
        failed_count = 0
        skipped_count = 0
        excluded_count = 0

        for i, user_info in enumerate(user_data, 1):
            user_id = user_info["user_id"]
            first_name = user_info["first_name"]
            full_name = user_info["full_name"]
            company_name = user_info.get("company_name", "")

            company_info = f" ({company_name})" if company_name else ""
            print(
                f"\n[{i}/{len(user_data)}] –û–±—Ä–æ–±–ª—è—î–º–æ {full_name}{company_info} (ID: {user_id})..."
            )

            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º follow-up)
                message_template = random.choice(self.follow_up_messages)
                message = message_template.format(name=first_name)

                print(
                    f"   üí¨ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ: '{message_template[:50]}...' –∑ —ñ–º'—è–º '{first_name}'"
                )
                print(
                    f"   üí¨ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π follow-up: '{self.second_follow_up_message}'"
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º follow-up —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —á–∞—Ç—É)
                success = self.send_message_to_user(
                    user_id, message, full_name, company_name
                )

                if success == "success":
                    print(f"   ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    success_count += 1
                elif success == "already_contacted":
                    print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—á–∞—Ç –≤–∂–µ –º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
                    skipped_count += 1
                elif success == "excluded_company":
                    print(f"   üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∫–æ–º–ø–∞–Ω—ñ—è –≤–∏–∫–ª—é—á–µ–Ω–∞)")
                    excluded_count += 1
                else:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
                    failed_count += 1

                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                if i < len(user_data):
                    print(f"   ‚è±Ô∏è –ß–µ–∫–∞—î–º–æ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay_seconds)

            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                failed_count += 1

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –¥–ª—è {account_name}:")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—á–∞—Ç —ñ—Å–Ω—É—î): {skipped_count}")
        print(f"   üö´ –í–∏–∫–ª—é—á–µ–Ω–æ (–∫–æ–º–ø–∞–Ω—ñ—è): {excluded_count}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}")

        return success_count, failed_count

    def bulk_message_single_account(
        self,
        csv_file: str,
        account_key: str,
        delay_seconds: int = 3,
        user_limit: int = None,
        enable_position_filter: bool = True,
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ CSV —Ñ–∞–π–ª—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–∏—à–µ –æ–¥–∏–Ω messenger –∞–∫–∞—É–Ω—Ç"""
        print(
            f"\nüì¨ –†–û–ó–°–ò–õ–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ó –û–î–ù–û–ì–û MESSENGER –ê–ö–ê–£–ù–¢–ê ({self.accounts[account_key]['name']}): {csv_file}"
        )

        # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ CSV
        user_data = self.extract_user_data_from_csv(
            csv_file,
            apply_filters=True,
            enable_position_filter=enable_position_filter,
        )

        if not user_data:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            return 0, 0

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if user_limit and user_limit > 0:
            if len(user_data) > user_limit:
                user_data = user_data[:user_limit]
                original_count = len(
                    self.extract_user_data_from_csv(
                        csv_file,
                        apply_filters=True,
                        enable_position_filter=enable_position_filter,
                    )
                )
                print(
                    f"üî¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª—ñ–º—ñ—Ç: –æ–±—Ä–æ–±–ª—è—Ç–∏–º–µ–º–æ {user_limit} –∑ {original_count} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
                )

        print(f"üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Å–∏–ª–∫—É:")
        print(f"   üë§ –ê–∫–∞—É–Ω—Ç: {self.accounts[account_key]['name']}")
        print(f"   üìß –ö–æ–Ω—Ç–∞–∫—Ç—ñ–≤: {len(user_data)}")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç
        print(f"\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ {account_key}...")
        if not self.switch_account(account_key):
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –∞–∫–∞—É–Ω—Ç {account_key}")
            return 0, 0

        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–¥–Ω–∏–º –∞–∫–∞—É–Ω—Ç–æ–º
        success, failed = self._process_user_batch(
            user_data, delay_seconds, f"Single {account_key}"
        )

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –†–û–ó–°–ò–õ–ö–ò:")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}")
        print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}")
        print(
            f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(success/(success+failed)*100):.1f}%"
            if (success + failed) > 0
            else "N/A"
        )

        return success, failed

    def load_existing_attendees(self, csv_file=None):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –∑ CSV"""
        if csv_file is None:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        existing = set()

        if not os.path.exists(csv_file):
            print(f"‚ö†Ô∏è –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return existing

        with open(csv_file, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –∑ full_name —Ç–∞ company_name
                full_name = row.get("full_name", "").strip().lower()
                company = row.get("company_name", "").strip().lower()

                if full_name:  # –ú—ñ–Ω—ñ–º—É–º –ø–æ—Ç—Ä—ñ–±–Ω–µ —ñ–º'—è
                    key = f"{full_name}|{company}"
                    existing.add(key)

        print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(existing)} —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ {csv_file}")
        return existing

    def find_new_attendees(self, search_results, existing_keys):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤"""
        new_attendees = []

        for attendee in search_results:
            # –§–æ—Ä–º—É—î–º–æ full_name
            first_name = (attendee.get("firstName") or "").strip()
            last_name = (attendee.get("lastName") or "").strip()
            full_name = f"{first_name} {last_name}".strip().lower()

            # –û—Ç—Ä–∏–º—É—î–º–æ company
            company = (attendee.get("companyName") or "").strip().lower()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á
            if full_name:
                key = f"{full_name}|{company}"

                if key not in existing_keys:
                    new_attendees.append(attendee)

        return new_attendees

    def format_attendee_for_csv(self, attendee_details):
        """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∞ –¥–ª—è CSV"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î userProfile (–¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ) —á–∏ —Ü–µ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
        if "userProfile" in attendee_details:
            # –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ API get_user_details
            profile = attendee_details["userProfile"]
            first_name = profile.get("firstName", "")
            last_name = profile.get("lastName", "")
            full_name = f"{first_name} {last_name}".strip()

            # Extract contacts from introduction text immediately
            introduction_text = profile.get("introduction", "")
            other_contacts = ""
            if introduction_text:
                contacts = self.contact_extractor.extract_contacts_from_text(
                    introduction_text
                )
                other_contacts = (
                    ", ".join(sorted(contacts)) if contacts else ""
                )

            return {
                "full_name": full_name,
                "company_name": profile.get("companyName", ""),
                "position": profile.get("jobTitle", ""),
                "linkedin_url": profile.get("linkedInUrl", ""),
                "facebook_url": profile.get("facebookUrl", ""),
                "x_twitter_url": profile.get("twitterUrl", ""),
                "other_socials": profile.get(
                    "website", ""
                ),  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ website —è–∫ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É
                "other_contacts": other_contacts,  # Add extracted contacts immediately
                "country": profile.get("country", ""),
                "responsibility": profile.get("areaOfResponsibility", ""),
                "gaming_vertical": profile.get("mainGamingVertical", ""),
                "organization_type": profile.get("organizationType", ""),
                "introduction": introduction_text,
                "source_url": f"https://sbcconnect.com/event/sbc-summit-2025/attendees/{attendee_details.get('userId', '')}",
                "profile_image_url": profile.get("photoUrl", ""),
            }
        else:
            # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ advanced search
            first_name = attendee_details.get("firstName", "")
            last_name = attendee_details.get("lastName", "")
            full_name = f"{first_name} {last_name}".strip()

            return {
                "full_name": full_name,
                "company_name": attendee_details.get("companyName", ""),
                "position": attendee_details.get("jobTitle", ""),
                "linkedin_url": "",  # –¶—ñ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                "facebook_url": "",
                "x_twitter_url": "",
                "other_socials": "",
                "other_contacts": "",  # Empty for basic data without introduction
                "country": "",
                "responsibility": "",
                "gaming_vertical": "",
                "organization_type": "",
                "introduction": "",
                "source_url": f"https://sbcconnect.com/event/sbc-summit-2025/attendees/{attendee_details.get('userId', '')}",
                "profile_image_url": attendee_details.get("photoUrl", ""),
            }

    def save_new_attendees(self, new_attendees_data, csv_file=None):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–æ CSV —Ñ–∞–π–ª—É"""
        if csv_file is None:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        file_exists = os.path.exists(csv_file)

        with open(csv_file, "a", newline="", encoding="utf-8") as f:
            fieldnames = [
                "full_name",
                "company_name",
                "position",
                "linkedin_url",
                "facebook_url",
                "x_twitter_url",
                "other_socials",
                "other_contacts",  # Add other_contacts field to CSV structure
                "country",
                "responsibility",
                "gaming_vertical",
                "organization_type",
                "introduction",
                "source_url",
                "profile_image_url",
                "connected",  # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è messaging
                "Follow-up",
                "valid",
                "Comment",
                "Date",
                "chat_id",  # –ù–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è chat_id
            ]

            writer = csv.DictWriter(f, fieldnames=fieldnames)

            # –ü–∏—à–µ–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —è–∫—â–æ —Ñ–∞–π–ª –Ω–æ–≤–∏–π
            if not file_exists:
                writer.writeheader()

            # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ
            for attendee in new_attendees_data:
                # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                attendee_with_messaging_fields = attendee.copy()
                attendee_with_messaging_fields.update(
                    {
                        "connected": "",
                        "Follow-up": "",
                        "valid": "",
                        "Comment": "",
                        "Date": "",
                    }
                )
                writer.writerow(attendee_with_messaging_fields)

        print(
            f"üíæ –î–æ–¥–∞–Ω–æ {len(new_attendees_data)} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–æ {csv_file}"
        )

    def process_new_attendees(self, new_attendees):
        """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ - –æ—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ"""
        detailed_data = []
        total = len(new_attendees)

        print(f"\nüîç –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è {total} –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤...")

        for i, attendee in enumerate(new_attendees, 1):
            user_id = attendee.get("userId")
            if not user_id:
                print(f"   [{i}/{total}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å –±–µ–∑ userId")
                continue

            full_name = f"{attendee.get('firstName', '')} {attendee.get('lastName', '')}".strip()
            print(
                f"   [{i}/{total}] –û–±—Ä–æ–±–ª—è—î–º–æ {full_name} (ID: {user_id})..."
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            details = self.get_user_details(user_id)

            if details and isinstance(details, dict):
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î userProfile –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if "userProfile" in details:
                    print(f"       ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
                    formatted = self.format_attendee_for_csv(details)
                    # Show contact extraction feedback
                    if formatted.get("other_contacts"):
                        print(
                            f"       üìû –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏: {formatted['other_contacts']}"
                        )
                    else:
                        print(f"       üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print(
                        f"       ‚ö†Ô∏è –ù–µ–º–∞—î userProfile, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ"
                    )
                    formatted = self.format_attendee_for_csv(attendee)
                detailed_data.append(formatted)
            else:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
                print(
                    f"       ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ"
                )
                formatted = self.format_attendee_for_csv(attendee)
                detailed_data.append(formatted)

            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            if i % 10 == 0:
                time.sleep(1)

        # Show contact extraction summary
        contacts_found = sum(
            1 for attendee in detailed_data if attendee.get("other_contacts")
        )
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ï–ö–°–¢–†–ê–ö–¶–Ü–á –ö–û–ù–¢–ê–ö–¢–Ü–í:")
        print(
            f"   üìû –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —É {contacts_found} –∑ {len(detailed_data)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"
        )
        print(
            f"   üìà –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤: {(contacts_found/len(detailed_data)*100):.1f}%"
            if detailed_data
            else "0%"
        )

        return detailed_data

    def run_update(self, csv_file=None):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏"""
        if csv_file is None:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        print("\n" + "=" * 60)
        print("üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –£–ß–ê–°–ù–ò–ö–Ü–í SBC SUMMIT 2025")
        print("=" * 60)

        # Create data directory if it doesn't exist
        data_dir = self.get_data_dir()
        os.makedirs(data_dir, exist_ok=True)

        # Update csv_file path to include data directory
        csv_file_path = csv_file

        # 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ advanced search
        print("\nüì° –ï—Ç–∞–ø 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ advanced search...")
        all_results = self.get_all_advanced_search_results()
        print(f"‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(all_results)} —É—á–∞—Å–Ω–∏–∫—ñ–≤")

        # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—É –±–∞–∑—É
        print("\nüìã –ï—Ç–∞–ø 2: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–æ—é –±–∞–∑–æ—é...")
        existing_keys = self.load_existing_attendees(csv_file_path)

        # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–≤–∏—Ö
        new_attendees = self.find_new_attendees(all_results, existing_keys)
        print(f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö: {len(new_attendees)} —É—á–∞—Å–Ω–∏–∫—ñ–≤")

        if not new_attendees:
            print("\n‚úÖ –ë–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ–º–∞—î")
            return

        # 4. –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–∏—Ö
        print("\nüîç –ï—Ç–∞–ø 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
        detailed_data = self.process_new_attendees(new_attendees)

        # 5. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ CSV
        print("\nüíæ –ï—Ç–∞–ø 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
        self.save_new_attendees(detailed_data, csv_file_path)

        # 6. –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –∑ –Ω–æ–≤–∏–º–∏
        kyiv_tz = ZoneInfo("Europe/Kiev")
        yesterday = datetime.now(kyiv_tz) - timedelta(days=1)
        today = yesterday.strftime("%m_%d")
        new_file = os.path.join(data_dir, f"attendees_{today}.csv")
        with open(new_file, "w", newline="", encoding="utf-8") as f:
            fieldnames = [
                "full_name",
                "company_name",
                "position",
                "linkedin_url",
                "facebook_url",
                "x_twitter_url",
                "other_socials",
                "other_contacts",  # Add other_contacts field to daily CSV structure
                "country",
                "responsibility",
                "gaming_vertical",
                "organization_type",
                "introduction",
                "source_url",
                "profile_image_url",
                "connected",  # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è messaging
                "Follow-up",
                "valid",
                "Comment",
                "Date",
                "chat_id",  # –ù–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è chat_id
            ]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()

            # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è messaging –ø–æ–ª—ñ–≤
            detailed_data_with_messaging = []
            for attendee in detailed_data:
                attendee_copy = attendee.copy()
                attendee_copy.update(
                    {
                        "connected": "",
                        "Follow-up": "",
                        "valid": "",
                        "Comment": "",
                        "Date": "",
                    }
                )
                detailed_data_with_messaging.append(attendee_copy)

            writer.writerows(detailed_data_with_messaging)

        print(f"üíæ –¢–∞–∫–æ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {new_file}")

        print("\n" + "=" * 60)
        print("‚úÖ –û–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
        print(
            f"   –í—Å—å–æ–≥–æ –≤ –±–∞–∑—ñ: {len(existing_keys) + len(new_attendees)} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        )
        print(f"   –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö: {len(new_attendees)}")
        print("=" * 60)

    def show_main_menu(self):
        """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        while True:
            print("\n" + "=" * 60)
            print("üéØ SBC ATTENDEES MANAGER")
            print("=" * 60)
            print(
                f"üìç Current account: {self.accounts[self.current_account]['name']}"
            )
            print("-" * 60)
            print("1. üì• Scrape new contacts (uses scraper account)")
            print("2. üë• Send messages (dual messenger accounts)")
            print(
                "3. üìû Follow-up campaigns (–∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º + follow-up)"
            )
            print(
                "      ‚Ä¢ –†–µ–∂–∏–º 1: CSV —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è - —à–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–æ–∑–ø–æ–¥—ñ–ª–æ–º –∑–∞ –∞–≤—Ç–æ—Ä–∞–º–∏"
            )
            print(
                "      ‚Ä¢ –†–µ–∂–∏–º 2: –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ - –¥–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤"
            )
            print(
                "      ‚Ä¢ –†–µ–∂–∏–º 3: –ü–æ –∞–≤—Ç–æ—Ä–∞–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º –∑ CSV"
            )
            print("4. ÔøΩÔ∏è Conference followup for positive conversations")
            print("5. ÔøΩüì¨ Check for responses and update CSV status")
            print("6. üìù Update existing CSV with contacts")
            print("7. üö´ Manage excluded companies")
            print("8. üìä Account status")
            print("9. üö™ Exit")
            print("=" * 60)
            print(f"üö´ Excluded companies: {len(self.excluded_companies)}")

            choice = input("‚û°Ô∏è Choose an action (1-9): ").strip()

            if choice == "1":
                self.handle_scrape_contacts()
            elif choice == "2":
                self.handle_multi_account_messages()
            elif choice == "3":
                self.handle_followup_campaigns()
            elif choice == "4":
                self.handle_conference_followup()
            elif choice == "5":
                self.handle_check_responses()
            elif choice == "6":
                self.handle_update_csv_contacts()
            elif choice == "7":
                self.handle_excluded_companies()
            elif choice == "8":
                self.show_account_status()
            elif choice == "9":
                print("üëã Goodbye!")
                break
            else:
                print("‚ùå Invalid choice. Please select 1-9.")

    def handle_scrape_contacts(self):
        """–û–±—Ä–æ–±–ª—è—î —Å–∫—Ä–µ–π–ø—ñ–Ω–≥ –Ω–æ–≤–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"""
        print("\nüîÑ SCRAPING NEW CONTACTS")
        print("=" * 40)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è scraper –∞–∫–∞—É–Ω—Ç
        if self.current_account != "scraper":
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ scraper –∞–∫–∞—É–Ω—Ç...")
            self.switch_account("scraper")

        confirm = input("Start scraping new attendees? (y/n): ").lower()
        if confirm == "y":
            self.run_update()
        else:
            print("‚ùå Scraping cancelled")

    def handle_multi_account_messages(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –æ–¥–Ω–æ–≥–æ –∞–±–æ –¥–≤–æ—Ö messenger –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        print("\nüë• SEND MESSAGES - ACCOUNT SELECTION")
        print("=" * 40)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö messenger –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        messenger_accounts = []
        for account_key, account_info in self.accounts.items():
            if (
                account_info["role"] == "messaging"
                and account_info["username"]
            ):
                messenger_accounts.append(account_key)

        if not messenger_accounts:
            print("‚ùå No messenger accounts configured!")
            return

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é messenger –∞–∫–∞—É–Ω—Ç—ñ–≤
        print("üîß Available messenger accounts:")
        for i, account_key in enumerate(messenger_accounts, 1):
            account_info = self.accounts[account_key]
            print(
                f"   {i}. {account_key}: {account_info['name']} ({account_info['username']})"
            )

        # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
        print("\nüìã –†–µ–∂–∏–º —Ä–æ–∑—Å–∏–ª–∫–∏:")
        for i, account_key in enumerate(messenger_accounts, 1):
            print(f"   {i}. üë§ –û–¥–∏–Ω –∞–∫–∞—É–Ω—Ç ({account_key})")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç —Ä–µ–∂–∏–º–∞
        if len(messenger_accounts) > 1:
            print(f"   A. üë• –í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ (—Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ—Ä—ñ–≤–Ω—É)")
            print(
                f"   C. üéØ –í–∏–±—Ä–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3 –∞–±–æ 2,3)"
            )

        print(
            f"\nüí° –î–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-{len(messenger_accounts)})"
        )
        if len(messenger_accounts) > 1:
            print(f"üí° –î–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –≤–≤–µ–¥—ñ—Ç—å 'A'")
            print(
                f"ÔøΩ –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –≤–≤–µ–¥—ñ—Ç—å 'C' –∞–±–æ –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '1,3')"
            )

        mode_choice = input("‚û°Ô∏è –í–∞—à –≤–∏–±—ñ—Ä: ").strip().upper()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        selected_accounts = []
        selected_mode = ""

        if mode_choice == "A" and len(messenger_accounts) > 1:
            # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            selected_accounts = messenger_accounts
            selected_mode = "multi_messenger"
        elif mode_choice == "C" and len(messenger_accounts) > 1:
            # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            account_choice = input(
                f"‚û°Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ –∞–∫–∞—É–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (1-{len(messenger_accounts)}): "
            ).strip()
            try:
                account_numbers = [
                    int(x.strip()) for x in account_choice.split(",")
                ]
                if all(
                    1 <= num <= len(messenger_accounts)
                    for num in account_numbers
                ):
                    selected_accounts = [
                        messenger_accounts[num - 1] for num in account_numbers
                    ]
                    selected_mode = (
                        "custom_multi"
                        if len(selected_accounts) > 1
                        else f"single_{selected_accounts[0]}"
                    )
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –Ω–æ–º–µ—Ä–∏ –∞–∫–∞—É–Ω—Ç—ñ–≤. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
                    return
            except ValueError:
                print(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3). –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞."
                )
                return
        elif "," in mode_choice:
            # –ü—Ä—è–º–∏–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            try:
                account_numbers = [
                    int(x.strip()) for x in mode_choice.split(",")
                ]
                if all(
                    1 <= num <= len(messenger_accounts)
                    for num in account_numbers
                ):
                    selected_accounts = [
                        messenger_accounts[num - 1] for num in account_numbers
                    ]
                    selected_mode = (
                        "custom_multi"
                        if len(selected_accounts) > 1
                        else f"single_{selected_accounts[0]}"
                    )
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –Ω–æ–º–µ—Ä–∏ –∞–∫–∞—É–Ω—Ç—ñ–≤. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
                    return
            except ValueError:
                print(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3). –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞."
                )
                return
        elif mode_choice.isdigit():
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            choice_num = int(mode_choice)
            if 1 <= choice_num <= len(messenger_accounts):
                selected_accounts = [messenger_accounts[choice_num - 1]]
                selected_mode = f"single_{selected_accounts[0]}"
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∞–∫–∞—É–Ω—Ç–∞. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
                return
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
            return

        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ CSV —Ñ–∞–π–ª–∏
        data_dir = self.get_data_dir()
        csv_files = []

        if os.path.exists(data_dir):
            for file in os.listdir(data_dir):
                if file.endswith(".csv"):
                    csv_files.append(file)

        if not csv_files:
            print(f"‚ùå No CSV files found in {data_dir}/")
            return

        print("\nüìã Available CSV files:")
        for i, file in enumerate(csv_files, 1):
            file_path = os.path.join(data_dir, file)
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    reader = csv.DictReader(f)
                    count = sum(1 for row in reader)
                print(f"   {i}. {file} ({count} contacts)")
            except:
                print(f"   {i}. {file} (unable to read)")

        # –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É
        file_choice = input(f"‚û°Ô∏è Choose file (1-{len(csv_files)}): ").strip()

        try:
            file_index = int(file_choice) - 1
            if 0 <= file_index < len(csv_files):
                selected_file = os.path.join(data_dir, csv_files[file_index])

                print(f"\nüìÅ Selected: {csv_files[file_index]}")

                # Ask about filter preferences
                print("\nüîß FILTER SETTINGS")
                print("=" * 30)
                print("Available filters:")
                print(
                    "1. Gaming vertical filter: Excludes 'land-based' companies (always enabled)"
                )
                print(
                    "2. Position filter: Only includes relevant positions like CEO, CFO, Payments, etc."
                )

                position_filter_choice = (
                    input("‚û°Ô∏è Enable position filter? (y/n, default: y): ")
                    .strip()
                    .lower()
                )
                enable_position_filter = (
                    position_filter_choice != "n"
                )  # Default to True unless explicitly 'n'

                if enable_position_filter:
                    print(
                        "‚úÖ Position filter enabled - will only target relevant positions"
                    )
                else:
                    print(
                        "‚ö†Ô∏è Position filter disabled - will target ALL positions"
                    )

                # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                try:
                    user_data = self.extract_user_data_from_csv(
                        selected_file,
                        apply_filters=True,
                        enable_position_filter=enable_position_filter,
                    )
                    total_contacts = len(user_data)

                    if total_contacts == 0:
                        print(
                            "‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"
                        )
                        print(
                            "üí° –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ñ–∞–π–ª –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV"
                        )
                        if not enable_position_filter:
                            print(
                                "üí° –ê–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤—ñ–º–∫–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏"
                            )
                        return

                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ CSV —Ñ–∞–π–ª—É: {e}")
                    print(
                        "üí° –§–∞–π–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ?"
                    )

                    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                    fix_choice = input(
                        "‚û°Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ CSV —Ñ–∞–π–ª? (y/n): "
                    ).lower()
                    if fix_choice == "y":
                        print("üîß –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª...")
                        if self.fix_malformed_csv(selected_file):
                            print("‚úÖ –§–∞–π–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑...")
                            try:
                                user_data = self.extract_user_data_from_csv(
                                    selected_file,
                                    apply_filters=True,
                                    enable_position_filter=enable_position_filter,
                                )
                                total_contacts = len(user_data)

                                if total_contacts == 0:
                                    print(
                                        "‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
                                    )
                                    return
                                else:
                                    print(
                                        f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_contacts} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
                                    )
                            except Exception as e2:
                                print(
                                    f"‚ùå –ù–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e2}"
                                )
                                return
                        else:
                            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª")
                            return
                    else:
                        print("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
                        return

                # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                # 1. –õ—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                limit_input = input(
                    f"‚û°Ô∏è User limit (default: all {total_contacts} users, or enter number): "
                ).strip()
                try:
                    user_limit = int(limit_input) if limit_input else None
                    if user_limit and user_limit > total_contacts:
                        print(
                            f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç {user_limit} –±—ñ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ({total_contacts}), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ—Ö"
                        )
                        user_limit = None
                except:
                    user_limit = None

                # –ü–æ–∫–∞–∑—É—î–º–æ —è–∫ –±—É–¥–µ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ª—ñ–º—ñ—Ç—É
                actual_users = user_limit if user_limit else total_contacts
                half = actual_users // 2

                print(f"\nüìä Work distribution for {actual_users} users:")
                print(
                    f"   üë§ Messenger1 ({self.accounts['messenger1']['name']}): {half} contacts"
                )
                print(
                    f"   üë§ Messenger2 ({self.accounts['messenger2']['name']}): {actual_users - half} contacts"
                )

                # –ü–æ–∫–∞–∑—É—î–º–æ —à–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                print("\nüí¨ Message templates (will use random selection):")
                for i, template in enumerate(self.follow_up_messages, 1):
                    preview = template.replace("{name}", "[NAME]")
                    preview_short = (
                        preview[:100] + "..."
                        if len(preview) > 100
                        else preview
                    )
                    print(f"   {i}. {preview_short}")

                print(f"\nüí¨ Automatic follow-up message:")
                print(f"   ‚Üí {self.second_follow_up_message}")

                print(
                    f"\n‚ö†Ô∏è Will send random message template + automatic follow-up (5s delay) to users without existing chats"
                )

                # 2. –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
                delay = input(
                    "‚û°Ô∏è Delay between contacts in seconds (default 8, includes 5s for follow-up): "
                ).strip()
                try:
                    delay_seconds = (
                        int(delay) if delay else 8
                    )  # Increased default due to automatic follow-up
                except:
                    delay_seconds = 8

                # 3. –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                actual_users = user_limit if user_limit else total_contacts
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞
                if selected_mode == "multi_messenger":
                    mode_text = f"–∑ —É—Å—ñ—Ö {len(messenger_accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤ (—Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ—Ä—ñ–≤–Ω—É)"
                elif selected_mode == "custom_multi":
                    account_names = [
                        self.accounts[acc]["name"] for acc in selected_accounts
                    ]
                    mode_text = f"–∑ –≤–∏–±—Ä–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {', '.join(account_names)} (—Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ—Ä—ñ–≤–Ω—É)"
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "single_messenger1" -> "messenger1")
                    account_key = selected_mode.replace("single_", "")
                    account_name = self.accounts[account_key]["name"]
                    mode_text = f"–∑ –æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ ({account_name})"

                confirm = input(
                    f"–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É {mode_text} –¥–ª—è {actual_users} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é {delay_seconds}—Å? (y/n): "
                ).lower()
                if confirm == "y":
                    if selected_mode == "multi_messenger":
                        self.bulk_message_multi_account(
                            selected_file,
                            delay_seconds,
                            user_limit,
                            enable_position_filter,
                        )
                    elif selected_mode == "custom_multi":
                        self.bulk_message_custom_accounts(
                            selected_file,
                            selected_accounts,
                            delay_seconds,
                            user_limit,
                            enable_position_filter,
                        )
                    else:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ä–µ–∂–∏–º–∞
                        account_key = selected_mode.replace("single_", "")
                        self.bulk_message_single_account(
                            selected_file,
                            account_key,
                            delay_seconds,
                            user_limit,
                            enable_position_filter,
                        )
                else:
                    print("‚ùå Multi-messenger messaging cancelled")
            else:
                print("‚ùå Invalid file selection")
        except ValueError:
            print("‚ùå Invalid input")

    def handle_followup_campaigns(self):
        """–û–±—Ä–æ–±–ª—è—î follow-up –∫–∞–º–ø–∞–Ω—ñ—ó"""
        print("\nüì¨ FOLLOW-UP CAMPAIGNS")
        print("=" * 40)

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ –¥–∞—Ç–∏ follow-up
        kyiv_tz = ZoneInfo("Europe/Kiev")
        current_date = datetime.now(kyiv_tz)
        sbc_date = self.sbc_start_date
        days_until_sbc = (sbc_date - current_date).days

        print(f"üìÖ –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}")
        print(f"üìÖ –î–∞—Ç–∞ SBC Summit: {sbc_date.strftime('%d.%m.%Y')}")
        print(f"‚è∞ –î–Ω—ñ–≤ –¥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó: {days_until_sbc}")

        print("\nüìã Follow-up –ø—Ä–∞–≤–∏–ª–∞:")
        print("   üì® Follow-up 1: —á–µ—Ä–µ–∑ 3 –¥–Ω—ñ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("   üì® Follow-up 2: —á–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("   üì® Follow-up 3: –∑–∞ 1 –¥–µ–Ω—å –¥–æ –ø–æ—á–∞—Ç–∫—É SBC Summit")

        print("\nüîß –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:")
        print("   1. üöÄ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π (CSV —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è - —à–≤–∏–¥–∫–æ)")
        print(
            "      ‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É—î —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'Sent' –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
        )
        print("      ‚Ä¢ –§—ñ–ª—å—Ç—Ä—É—î –∑–∞ –∞–≤—Ç–æ—Ä–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ CSV")
        print("      ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î follow-up –∑–≥—ñ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª")
        print("   2. üêå –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (–≤—Å—ñ —á–∞—Ç–∏ - –ø–æ–≤—ñ–ª—å–Ω–æ)")
        print("      ‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ —á–∞—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç–∞")
        print("      ‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É—î –∫–æ–∂–µ–Ω —á–∞—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç follow-up")
        print("   3. üë• –ü–æ –∞–≤—Ç–æ—Ä–∞–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö)")
        print("      ‚Ä¢ –†–æ–∑–¥—ñ–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞ –ø–æ–ª–µ–º 'author' –≤ CSV")
        print("      ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞")

        mode_choice = input("‚û°Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º (1-3): ").strip()

        if mode_choice == "1":
            method_to_use = "optimized"
            print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º")

            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            filter_choice = (
                input("‚û°Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞ gaming vertical? (y/n): ")
                .strip()
                .lower()
            )
            use_filters = filter_choice == "y"

            # –î–æ–¥–∞—î–º–æ –æ–∫—Ä–µ–º—É –æ–ø—Ü—ñ—é –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
            position_filter_choice = (
                input(
                    "‚û°Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏ (CEO, COO, CFO, business development, payments, —Ç–æ—â–æ)? (y/n): "
                )
                .strip()
                .lower()
            )
            enable_position_filter = position_filter_choice == "y"

            if enable_position_filter:
                print("üéØ –í–∫–ª—é—á–µ–Ω–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏")
            else:
                print("‚ö†Ô∏è –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –≤–∏–º–∫–Ω–µ–Ω–æ - –≤–∫–ª—é—á–µ–Ω—ñ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó")
        elif mode_choice == "2":
            method_to_use = "full"
            use_filters = False
            enable_position_filter = False
            print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        elif mode_choice == "3":
            method_to_use = "by_author"
            use_filters = False
            print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–µ–∂–∏–º –ø–æ –∞–≤—Ç–æ—Ä–∞–º")

            # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
            position_filter_choice = (
                input(
                    "‚û°Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏ (CEO, COO, CFO, business development, payments, —Ç–æ—â–æ)? (y/n): "
                )
                .strip()
                .lower()
            )
            enable_position_filter = position_filter_choice == "y"

            if enable_position_filter:
                print(
                    "üéØ –í–∫–ª—é—á–µ–Ω–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –¥–ª—è —Ä–µ–∂–∏–º—É –ø–æ –∞–≤—Ç–æ—Ä–∞–º"
                )
            else:
                print("‚ö†Ô∏è –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –≤–∏–º–∫–Ω–µ–Ω–æ - –≤–∫–ª—é—á–µ–Ω—ñ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º")
            method_to_use = "optimized"
            use_filters = False
            enable_position_filter = False

        # Special handling for by_author method
        if method_to_use == "by_author":
            print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ follow-up –∫–∞–º–ø–∞–Ω—ñ—ó –ø–æ –∞–≤—Ç–æ—Ä–∞–º...")
            stats = self.process_followup_campaigns_by_author(
                enable_position_filter
            )
            return

        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        messenger_accounts = ["messenger1", "messenger2", "messenger3"]
        print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ñ messenger –∞–∫–∞—É–Ω—Ç–∏:")
        for i, acc_key in enumerate(messenger_accounts, 1):
            acc = self.accounts[acc_key]
            print(f"   {i}. {acc['name']} ({acc['username']})")

        print("   4. –í—Å—ñ —Ç—Ä–∏ –∞–∫–∞—É–Ω—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ")

        # –í–∏–±—ñ—Ä –∞–∫–∞—É–Ω—Ç–∞
        account_choice = input(
            f"‚û°Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (1-4): "
        ).strip()

        try:
            if account_choice == "1":
                # –û–±—Ä–æ–±–∫–∞ –∑ messenger1
                if method_to_use == "optimized":
                    stats = self.process_followup_campaigns_optimized(
                        "messenger1", use_filters, enable_position_filter
                    )
                else:
                    stats = self.process_followup_campaigns("messenger1")
            elif account_choice == "2":
                # –û–±—Ä–æ–±–∫–∞ –∑ messenger2
                if method_to_use == "optimized":
                    stats = self.process_followup_campaigns_optimized(
                        "messenger2", use_filters, enable_position_filter
                    )
                else:
                    stats = self.process_followup_campaigns("messenger2")
            elif account_choice == "3":
                # –û–±—Ä–æ–±–∫–∞ –∑ messenger3
                if method_to_use == "optimized":
                    stats = self.process_followup_campaigns_optimized(
                        "messenger3", use_filters, enable_position_filter
                    )
                else:
                    stats = self.process_followup_campaigns("messenger3")
            elif account_choice == "4":
                # –û–±—Ä–æ–±–∫–∞ –∑ —É—Å—ñ–º–∞ —Ç—Ä—å–æ–º–∞ –∞–∫–∞—É–Ω—Ç–∞–º–∏
                print("\nüîÑ –û–±—Ä–æ–±–∫–∞ –∑ —É—Å—ñ–º–∞ —Ç—Ä—å–æ–º–∞ –∞–∫–∞—É–Ω—Ç–∞–º–∏...")

                print("\n" + "=" * 50)
                print("üì± MESSENGER 1")
                print("=" * 50)
                if method_to_use == "optimized":
                    stats1 = self.process_followup_campaigns_optimized(
                        "messenger1", use_filters, enable_position_filter
                    )
                else:
                    stats1 = self.process_followup_campaigns("messenger1")

                print("\n" + "=" * 50)
                print("üì± MESSENGER 2")
                print("=" * 50)
                if method_to_use == "optimized":
                    stats2 = self.process_followup_campaigns_optimized(
                        "messenger2", use_filters, enable_position_filter
                    )
                else:
                    stats2 = self.process_followup_campaigns("messenger2")

                print("\n" + "=" * 50)
                print("üì± MESSENGER 3")
                print("=" * 50)
                if method_to_use == "optimized":
                    stats3 = self.process_followup_campaigns_optimized(
                        "messenger3", use_filters, enable_position_filter
                    )
                else:
                    stats3 = self.process_followup_campaigns("messenger3")

                # –û–±'—î–¥–Ω—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if (
                    "error" not in stats1
                    and "error" not in stats2
                    and "error" not in stats3
                ):
                    combined_stats = {}
                    for key in stats1:
                        combined_stats[key] = (
                            stats1.get(key, 0)
                            + stats2.get(key, 0)
                            + stats3.get(key, 0)
                        )

                    print(f"\nüìä –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                    print(
                        f"   üìã –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —á–∞—Ç—ñ–≤: {combined_stats.get('analyzed', 0)}"
                    )
                    if method_to_use == "full":
                        print(
                            f"   üíæ chat_id –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {combined_stats.get('chat_ids_stored', 0)}"
                        )
                    print(
                        f"   ‚úÖ –ó –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏: {combined_stats.get('has_responses', 0)}"
                    )
                    print(
                        f"   üì® Follow-up 3 –¥–Ω—ñ: {combined_stats.get('day_3_sent', 0)}"
                    )
                    print(
                        f"   üì® Follow-up 7 –¥–Ω—ñ–≤: {combined_stats.get('day_7_sent', 0)}"
                    )
                    print(
                        f"   üì® –§—ñ–Ω–∞–ª—å–Ω–∏–π follow-up: {combined_stats.get('final_sent', 0)}"
                    )
                    print(f"   ‚ùå –ü–æ–º–∏–ª–æ–∫: {combined_stats.get('errors', 0)}")

                    total_sent = (
                        combined_stats.get("day_3_sent", 0)
                        + combined_stats.get("day_7_sent", 0)
                        + combined_stats.get("final_sent", 0)
                    )
                    print(f"   üìà –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
                return

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è follow-up –∫–∞–º–ø–∞–Ω—ñ—ó: {e}")

    def handle_conference_followup(self):
        """Handles conference followup for positive conversations"""
        print("\nüëÅÔ∏è CONFERENCE FOLLOWUP FOR POSITIVE CONVERSATIONS")
        print("=" * 60)
        print("–¶–µ–π —Ä–µ–∂–∏–º:")
        print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ messenger –∞–∫–∞—É–Ω—Ç–∏")
        print("‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É—î —á–∞—Ç–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏")
        print("‚Ä¢ –í–∏–∑–Ω–∞—á–∞—î –º–æ–≤—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        print("‚Ä¢ –†–æ–∑–ø—ñ–∑–Ω–∞—î –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç")
        print("‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î conference followup —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–º–æ–≤")
        print("=" * 60)

        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not os.path.exists(csv_file):
            print(f"‚ùå Main CSV file not found: {csv_file}")
            print(
                "   First run 'Check for responses' to populate response data"
            )
            return

        print(f"üìÅ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CSV: {csv_file}")

        # Show current CSV status for responses
        print("\nüìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å CSV:")
        response_stats = self.show_csv_status_for_responses(csv_file)

        if response_stats.get("with_responses", 0) == 0:
            print("‚ùå –ù–µ–º–∞—î —á–∞—Ç—ñ–≤ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
            print(
                "   –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å 'Check for responses and update CSV status'"
            )
            return

        print(
            f"\nüì¨ –ó–Ω–∞–π–¥–µ–Ω–æ {response_stats['with_responses']} —á–∞—Ç—ñ–≤ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏"
        )

        confirm = input(
            "\n‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ conference followup –∫–∞–º–ø–∞–Ω—ñ—î—é? (y/n): "
        ).lower()
        if confirm != "y":
            print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return

        try:
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ conference followup –∫–∞–º–ø–∞–Ω—ñ—é...")

            # Run the conference followup campaign
            stats = self.process_positive_conversation_followups(csv_file)

            # Show final results
            if stats.get("error"):
                print("‚ùå –ö–∞–º–ø–∞–Ω—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
            else:
                print(f"\n‚úÖ –ö–ê–ú–ü–ê–ù–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
                print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
                print(
                    f"   üì¨ –ß–∞—Ç—ñ–≤ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {stats.get('total_chats_checked', 0)}"
                )
                print(
                    f"   ‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–º–æ–≤: {stats.get('positive_conversations', 0)}"
                )
                print(
                    f"   üì® Conference followup –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('conference_followups_sent', 0)}"
                )

                if stats.get("positive_conversations", 0) > 0:
                    success_rate = (
                        stats.get("conference_followups_sent", 0)
                        / stats.get("positive_conversations", 0)
                    ) * 100
                    print(f"   üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è conference followup –∫–∞–º–ø–∞–Ω—ñ—ó: {e}")
            traceback.print_exc()

    def handle_update_csv_contacts(self):
        """–û–±—Ä–æ–±–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ CSV –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
        print("\nüìû UPDATE EXISTING CSV WITH CONTACTS")
        print("=" * 40)

        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not os.path.exists(csv_file):
            print(f"‚ùå Main CSV file not found: {csv_file}")
            print("   First run 'Scrape new contacts' to create the file")
            return

        print(f"üìÅ File to update: {csv_file}")
        print(
            "üìã This will extract contacts from introduction text for profiles"
        )
        print(
            "   that don't have contacts in the 'other_contacts' column yet."
        )

        confirm = input(
            "\nü§î Proceed with contact extraction? (y/n): "
        ).lower()
        if confirm == "y":
            self.update_existing_csv_with_contacts(csv_file)
        else:
            print("‚ùå Contact extraction cancelled")

    def show_csv_status_for_responses(
        self, csv_file: str = None
    ) -> Dict[str, int]:
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CSV —Ñ–∞–π–ª—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        if not csv_file:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not PANDAS_AVAILABLE:
            print("‚ùå pandas –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return {}

        if not os.path.exists(csv_file):
            print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {}

        try:
            df = pd.read_csv(csv_file)

            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_records = len(df)

            # –ó–∞–ø–∏—Å–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            sent_status = len(df[df["connected"] == "Sent"])
            sent_answer_status = len(df[df["connected"] == "Sent Answer"])
            answer_status = len(
                df[
                    df["connected"].str.contains(
                        "answer", case=False, na=False
                    )
                ]
            )
            empty_status = len(
                df[df["connected"].isna() | (df["connected"] == "")]
            )
            true_status = len(df[df["connected"] == "True"])

            # –ó–∞–ø–∏—Å–∏ –∑ chat_id
            has_chat_id = len(
                df[df["chat_id"].notna() & (df["chat_id"] != "")]
            )

            # –ó–∞–ø–∏—Å–∏ —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            check_mask = (
                (
                    (df["connected"] == "Sent")
                    | (df["connected"].isna())
                    | (df["connected"] == "")
                    | (df["connected"] == "True")
                )
                & (
                    # –í–∏–∫–ª—é—á–∞—î–º–æ —Ç–∏—Ö, —Ö—Ç–æ –≤–∂–µ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–±—É–¥—å-—è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —â–æ –º—ñ—Å—Ç–∏—Ç—å "answer")
                    (
                        ~df["connected"].str.contains(
                            "answer", case=False, na=False
                        )
                    )
                )
                & ((df["chat_id"].notna()) & (df["chat_id"] != ""))
            )
            needs_checking = len(df[check_mask])

            # Count responses from both connected and Comment columns
            with_responses_mask = (
                (df["connected"].str.contains("answer", case=False, na=False))
                | (
                    df["Comment"].str.contains(
                        "answered", case=False, na=False
                    )
                )
                | (
                    df["Comment"].str.contains(
                        "responded", case=False, na=False
                    )
                )
                | (df["Comment"].str.contains("replied", case=False, na=False))
            )
            with_responses = len(df[with_responses_mask])

            stats = {
                "total_records": total_records,
                "sent_status": sent_status,
                "sent_answer_status": sent_answer_status,
                "answer_status": answer_status,
                "empty_status": empty_status,
                "true_status": true_status,
                "has_chat_id": has_chat_id,
                "needs_checking": needs_checking,
                "with_responses": with_responses,
            }

            return stats

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {e}")
            return {}

    def handle_check_responses(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö"""
        print("\nüì¨ CHECK FOR RESPONSES IN ALL CHATS (OPTIMIZED)")
        print("=" * 40)

        csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        if not os.path.exists(csv_file):
            print(f"‚ùå Main CSV file not found: {csv_file}")
            print("   First run 'Scrape new contacts' to create the file")
            return

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CSV –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º
        print("ÔøΩ CSV —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        csv_stats = self.show_csv_status_for_responses(csv_file)
        if csv_stats:
            print(f"   üìã –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {csv_stats['total_records']}")
            print(f"   üì§ 'Sent': {csv_stats['sent_status']}")
            print(f"   ‚úÖ 'Sent Answer': {csv_stats['sent_answer_status']}")
            print(f"   ÔøΩ –ó 'answer': {csv_stats['answer_status']}")
            print(f"   ÔøΩüì≠ –ü–æ—Ä–æ–∂–Ω—ñ: {csv_stats['empty_status']}")
            print(f"   ‚úì 'True': {csv_stats['true_status']}")
            print(f"   üí¨ –ó chat_id: {csv_stats['has_chat_id']}")
            print(f"   üîç –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {csv_stats['needs_checking']}")

        print(f"\nüìÅ CSV file: {csv_file}")
        print(
            "üìã –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –ø—Ä–æ—Ü–µ—Å - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –¢–Ü–õ–¨–ö–ò —á–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º:"
        )
        print("   ‚úÖ 'Sent' (–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        print("   ‚úÖ –ü–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è")
        print("   ‚úÖ 'True'")
        print("   ‚úÖ –Ü —É —è–∫–∏—Ö —î chat_id (–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç)")
        print("\nüö´ –ù–ï –ø–µ—Ä–µ–≤—ñ—Ä—è—î:")
        print("   ‚ùå –ë—É–¥—å-—è–∫–∏–π —Å—Ç–∞—Ç—É—Å –∑ 'answer' (–≤–∂–µ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å)")
        print("   ‚ùå –ó–∞–ø–∏—Å–∏ –±–µ–∑ chat_id")
        print("   ‚ùå –ì—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏")

        print("\nüîß Optimized Process:")
        print("   1. üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è CSV –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º (—Ç—ñ–ª—å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏)")
        print("   2. üì¨ Check only filtered chats from messenger1 account")
        print("   3. üì¨ Check only filtered chats from messenger2 account")
        print(
            "   4. üìù Update CSV status to 'Sent Answer' for responded contacts"
        )
        print(
            "   5. üè∑Ô∏è Set Follow-up column to 'Answer' for responded contacts"
        )

        # –ü–æ–∫–∞–∑—É—î–º–æ messenger –∞–∫–∞—É–Ω—Ç–∏
        print(f"\nüë• Messenger accounts to check:")
        messenger_accounts = ["messenger1", "messenger2", "messenger3"]
        for account_key in messenger_accounts:
            if account_key in self.accounts:
                account = self.accounts[account_key]
                print(f"   ‚Ä¢ {account['name']} ({account['username']})")
            else:
                print(f"   ‚ö†Ô∏è {account_key} - not configured")

        if csv_stats.get("needs_checking", 0) == 0:
            print(
                "\n‚úÖ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –í—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ."
            )
            return

        confirm = input(
            f"\nü§î Proceed with checking {csv_stats.get('needs_checking', 0)} filtered chats? (y/n): "
        ).lower()

        if confirm == "y":
            try:
                print(
                    f"\nüöÄ Starting optimized response check for {csv_stats.get('needs_checking', 0)} chats..."
                )
                stats = self.check_all_responses_and_update_csv(csv_file)

                if "error" in stats:
                    print("‚ùå Process failed")
                else:
                    print("\n‚úÖ Response check completed successfully!")

                    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    print("\nüìä –û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    new_stats = self.show_csv_status_for_responses(csv_file)
                    if new_stats:
                        old_answered = csv_stats.get("sent_answer_status", 0)
                        new_answered = new_stats.get("sent_answer_status", 0)
                        increase = new_answered - old_answered
                        print(
                            f"   ‚úÖ 'Sent Answer': {old_answered} ‚Üí {new_answered} (+{increase})"
                        )
                        print(
                            f"   üîç –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {csv_stats.get('needs_checking', 0)} ‚Üí {new_stats.get('needs_checking', 0)}"
                        )

            except Exception as e:
                print(f"‚ùå Error during response check: {e}")
                import traceback

                traceback.print_exc()
        else:
            print("‚ùå Response check cancelled")

    def handle_excluded_companies(self):
        """–û–±—Ä–æ–±–ª—è—î —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏–∫–ª—é—á–µ–Ω–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏"""
        while True:
            print("\nüö´ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –í–ò–ö–õ–Æ–ß–ï–ù–ò–ú–ò –ö–û–ú–ü–ê–ù–Ü–Ø–ú–ò")
            print("=" * 40)
            print(
                f"üìä –ü–æ—Ç–æ—á–Ω–æ –≤–∏–∫–ª—é—á–µ–Ω–æ: {len(self.excluded_companies)} –∫–æ–º–ø–∞–Ω—ñ–π"
            )
            print("1. üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π")
            print("2. üß™ –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—é")
            print("3. üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑ —Ñ–∞–π–ª—É")
            print("4. ‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")

            choice = input("‚û°Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-4): ").strip()

            if choice == "1":
                self.show_excluded_companies()
                input("\n‚èé –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "2":
                company_name = input(
                    "\nüè¢ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É: "
                ).strip()
                if company_name:
                    self.test_company_exclusion(company_name)
                else:
                    print("‚ùå –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
                input("\n‚èé –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "3":
                print("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π...")
                old_count = len(self.excluded_companies)
                self.reload_excluded_companies()
                new_count = len(self.excluded_companies)
                print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–º–ø–∞–Ω—ñ–π: {old_count} ‚Üí {new_count}")
                input("\n‚èé –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "4":
                break

            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–∏–±–µ—Ä—ñ—Ç—å 1-4.")
                input("\n‚èé –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def show_account_status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        print("\nüìä ACCOUNT STATUS")
        print("=" * 40)
        print("=" * 40)
        if self.current_account:
            print(
                f"üìç Currently active: {self.accounts[self.current_account]['name']}"
            )
        else:
            print("üìç Currently active: None")

        print("\nüìã All accounts configuration:")

        for key, account in self.accounts.items():
            status = (
                "üü¢ ACTIVE" if key == self.current_account else "‚≠ï INACTIVE"
            )
            role_emoji = "üîç" if account["role"] == "scraping" else "üí¨"

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ credentials
            is_configured = (
                account["username"]
                and not account["username"].startswith(("MESSENGER", "your_"))
                and account["password"]
                and not account["password"].startswith(("MESSENGER", "your_"))
                and account["user_id"]
                and not account["user_id"].startswith(("MESSENGER", "your_"))
            )
            config_status = (
                "‚úÖ CONFIGURED" if is_configured else "‚ùå NOT CONFIGURED"
            )

            print(f"   {role_emoji} {key}: {account['name']}")
            print(f"      üìß Email: {account['username']}")
            print(f"      üé≠ Role: {account['role']}")
            print(f"      üîÑ Status: {status}")
            print(f"      ‚öôÔ∏è Config: {config_status}")
            print()

        print("‚ÑπÔ∏è Roles:")
        print("   üîç scraper - Used for scraping new contacts")
        print(
            "   üí¨ messenger1/messenger2/messenger3 - Used for sending messages"
        )
        print(
            "\nüí° To configure accounts, edit your .env file with real credentials"
        )
        print(
            f"\nüö´ Company Exclusions: {len(self.excluded_companies)} companies loaded"
        )

    def update_existing_csv_with_contacts(self, csv_file=None):
        """Updates existing CSV file to extract contacts for profiles that don't have them yet"""
        if csv_file is None:
            csv_file = os.path.join(self.get_data_dir(), "SBC - Attendees.csv")

        print(f"\nüìû –û–ù–û–í–õ–ï–ù–ù–Ø –Ü–°–ù–£–Æ–ß–û–ì–û CSV –ó –ö–û–ù–¢–ê–ö–¢–ê–ú–ò")
        print("=" * 50)

        if not os.path.exists(csv_file):
            print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        try:
            if PANDAS_AVAILABLE:
                # Read CSV with pandas
                df = pd.read_csv(csv_file)

                # Check if other_contacts column exists, if not add it
                if "other_contacts" not in df.columns:
                    df["other_contacts"] = ""
                    print("üìã –î–æ–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–∫—É 'other_contacts'")

                # Count rows that need contact extraction
                needs_extraction = (
                    (
                        df["other_contacts"].isna()
                        | (df["other_contacts"] == "")
                    )
                    & df["introduction"].notna()
                    & (df["introduction"] != "")
                )

                rows_to_update = needs_extraction.sum()
                print(
                    f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {rows_to_update} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –¥–ª—è –µ–∫—Å—Ç—Ä–∞–∫—Ü—ñ—ó –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
                )

                if rows_to_update == 0:
                    print("‚úÖ –í—Å—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∂–µ –º–∞—é—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
                    return

                # Extract contacts for rows that need it
                contacts_extracted = 0
                for idx, row in df.iterrows():
                    if needs_extraction.iloc[idx]:
                        introduction_text = str(row["introduction"])
                        contacts = (
                            self.contact_extractor.extract_contacts_from_text(
                                introduction_text
                            )
                        )
                        contacts_str = (
                            ", ".join(sorted(contacts)) if contacts else ""
                        )

                        if contacts_str:
                            df.at[idx, "other_contacts"] = contacts_str
                            contacts_extracted += 1
                            print(f"   üìû {row['full_name']}: {contacts_str}")

                        # Progress update
                        if (idx + 1) % 50 == 0:
                            print(f"   üìä –û–±—Ä–æ–±–ª–µ–Ω–æ {idx + 1} –∑–∞–ø–∏—Å—ñ–≤...")

                # Save updated CSV
                df.to_csv(csv_file, index=False)
                print(
                    f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {contacts_extracted} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"
                )
                print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {csv_file}")

            else:
                print(
                    "‚ùå Pandas –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å pandas –¥–ª—è —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
                )

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ CSV: {e}")

    def close(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –±—Ä–∞—É–∑–µ—Ä"""
        if self.browser:
            self.browser.close()
        if self.playwright:
            self.playwright.stop()
        print("üëã –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")


# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    scraper = SBCAttendeesScraper(headless=False)

    try:
        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è
        if scraper.start():
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
            scraper.show_main_menu()
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è")

    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        scraper.close()
