#!/usr/bin/env python3
"""
Interactive Campaign Launcher for SBC Summit 2025
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º
"""

import os
import sys
import subprocess
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from campaign_config import is_working_time, validate_config
    from campaign_manager import CampaignManager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ restricted/")
    sys.exit(1)


class InteractiveCampaignLauncher:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–π"""

    def __init__(self):
        self.manager = CampaignManager()
        self.current_dir = Path(__file__).parent

    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "=" * 80)
        print("üöÄ FIRST WAVE CAMPAIGN - SBC SUMMIT 2025")
        print("   –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("=" * 80)
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if is_working_time():
            print("‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            print("‚ö†Ô∏è  –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")

    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
        print("-" * 40)

        checks = self.manager.check_campaign_readiness()

        all_good = True

        if checks["csv_exists"]:
            print("‚úÖ CSV —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (SBC - Attendees.csv)")
            all_good = False

        if checks["csv_readable"]:
            print("‚úÖ CSV —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞")
            all_good = False

        if checks["has_target_audience"]:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è")
        else:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            all_good = False

        if checks["config_valid"]:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            all_good = False

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if checks["recommendations"]:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in checks["recommendations"]:
                print(f"   ‚Ä¢ {rec}")

        return all_good

    def show_target_audience_preview(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        print("\nüéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò")
        print("-" * 40)

        analysis = self.manager.identify_target_audience()
        if "error" in analysis:
            print(f"‚ùå {analysis['error']}")
            return False

        print(f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {analysis['total_available']:,}")
        print(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {analysis['priority_contacts']:,}")
        print(f"üë• –û–±—ã—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {analysis['regular_contacts']:,}")
        print(f"üìã –°–≤—è–∑–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ: {analysis['contacted_previously']:,}")

        if analysis["gaming_verticals"]:
            print(f"\nüéÆ –¢–û–ü Gaming Verticals:")
            for i, (vertical, count) in enumerate(
                list(analysis["gaming_verticals"].items())[:5], 1
            ):
                print(f"   {i}. {vertical}: {count}")

        if analysis["top_positions"]:
            print(f"\nüíº –¢–û–ü –ü–æ–∑–∏—Ü–∏–∏:")
            for i, (position, count) in enumerate(
                list(analysis["top_positions"].items())[:5], 1
            ):
                print(f"   {i}. {position}: {count}")

        return True

    def ask_confirmation(self, message: str, default: bool = False) -> bool:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        default_text = "Y/n" if default else "y/N"
        response = input(f"\n‚ùì {message} ({default_text}): ").strip().lower()

        if not response:
            return default

        return response in ["y", "yes", "–¥–∞", "–¥"]

    def select_campaign_mode(self) -> tuple:
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
        print("\n‚öôÔ∏è –†–ï–ñ–ò–ú –ö–ê–ú–ü–ê–ù–ò–ò")
        print("-" * 40)
        print("1. üß™ –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç (3-10 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)")
        print("2. üöÄ –ü–æ–ª–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è (—Ç–µ—Å—Ç + –æ—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)")
        print("3. ‚ö° –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑ —Ç–µ—Å—Ç–∞)")
        print("4. üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)")

        while True:
            choice = input("\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-4): ").strip()

            if choice == "1":
                mode = "test-only"
                break
            elif choice == "2":
                mode = "full-with-test"
                break
            elif choice == "3":
                mode = "full-only"
                break
            elif choice == "4":
                mode = "analysis-only"
                break
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
                continue

        # –í—ã–±–æ—Ä –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
        use_multi_account = True
        if mode != "analysis-only":
            print("\nüë• –ù–ê–°–¢–†–û–ô–ö–ò –ê–ö–ö–ê–£–ù–¢–û–í")
            print("-" * 40)
            print(
                "1. üîÑ –ú—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç (messenger1 + messenger2, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
            )
            print("2. üë§ –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç (—Ç–æ–ª—å–∫–æ messenger1)")

            while True:
                acc_choice = input("\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ (1-2): ").strip()
                if acc_choice == "1":
                    use_multi_account = True
                    print(
                        "‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"
                    )
                    break
                elif acc_choice == "2":
                    use_multi_account = False
                    print("‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç")
                    break
                else:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

        return mode, use_multi_account

    def get_test_limit(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        while True:
            try:
                limit = input(
                    "\n‚û°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (3-20, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): "
                ).strip()
                if not limit:
                    return 3

                limit = int(limit)
                if 1 <= limit <= 20:
                    return limit
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def run_analysis_only(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑"""
        print("\nüìä –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê")
        print("-" * 40)

        print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç...")
        self.manager.generate_campaign_report(detailed=True)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if self.ask_confirmation(
            "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ CSV —Ñ–∞–π–ª?"
        ):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = (
                f"restricted/data/target_audience_analysis_{timestamp}.csv"
            )
            result = self.manager.export_target_audience(output_file)
            print(f"üìÅ {result}")

    def run_campaign(
        self, mode: str, test_limit: int = 3, use_multi_account: bool = True
    ):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        print(f"\nüöÄ –ó–ê–ü–£–°–ö –ö–ê–ú–ü–ê–ù–ò–ò: {mode.upper()}")
        print("-" * 40)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = ["python", str(self.current_dir / "first_wave_campaign.py")]

        if mode == "test-only":
            cmd.extend(["--test-only", "--test-limit", str(test_limit)])
        elif mode == "full-only":
            cmd.append("--full-only")
        elif mode == "full-with-test":
            cmd.extend(["--test-limit", str(test_limit)])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç–∞
        if not use_multi_account:
            cmd.append("--single-account")

        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        if use_multi_account:
            print("üë• –†–µ–∂–∏–º: –ú—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç (messenger1 + messenger2)")
        else:
            print("üë§ –†–µ–∂–∏–º: –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç (messenger1)")

        print("\n" + "=" * 80)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            process = subprocess.run(cmd, cwd=self.current_dir.parent)

            if process.returncode == 0:
                print("\n‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(
                    f"\n‚ùå –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})"
                )

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ö–∞–º–ø–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {e}")

    def show_logs_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö"""
        print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –õ–û–ì–ê–•")
        print("-" * 40)

        log_files = [
            ("first_wave_campaign.log", "–î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
            ("first_wave_campaign_log.json", "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –∫–∞–º–ø–∞–Ω–∏–π"),
            ("first_wave_results.csv", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"),
        ]

        data_dir = Path("restricted/data")

        for filename, description in log_files:
            file_path = data_dir / filename
            if file_path.exists():
                size = file_path.stat().st_size
                modified = datetime.fromtimestamp(file_path.stat().st_mtime)
                print(f"‚úÖ {filename}")
                print(f"   {description}")
                print(
                    f"   –†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: {modified.strftime('%d.%m.%Y %H:%M')}"
                )
            else:
                print(f"‚ùå {filename} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print()

        print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
        print("   tail -f restricted/data/first_wave_campaign.log")

    def show_post_campaign_options(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
        print("\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò")
        print("-" * 40)
        print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º")
        print("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö")
        print("3. üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ CSV")
        print("4. üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        print("5. ‚Ü©Ô∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("6. üö™ –í—ã—Ö–æ–¥")

        while True:
            choice = input("\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-6): ").strip()

            if choice == "1":
                self.manager.generate_campaign_report(detailed=True)
                break
            elif choice == "2":
                self.show_logs_info()
                break
            elif choice == "3":
                result = self.manager.cleanup_duplicates(dry_run=True)
                print(result)
                if "–Ω–∞–π–¥–µ–Ω–æ" in result.lower() and self.ask_confirmation(
                    "–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É?"
                ):
                    result = self.manager.cleanup_duplicates(dry_run=False)
                    print(result)
                break
            elif choice == "4":
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_file = (
                    f"restricted/data/remaining_audience_{timestamp}.csv"
                )
                result = self.manager.export_target_audience(output_file)
                print(f"üìÅ {result}")
                break
            elif choice == "5":
                return "menu"
            elif choice == "6":
                return "exit"
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")

        return "menu"

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        while True:
            self.print_header()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            if not self.check_prerequisites():
                print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –∫–∞–º–ø–∞–Ω–∏–∏!")
                print("–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
                if self.ask_confirmation("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?"):
                    subprocess.run(
                        [
                            "python",
                            str(self.current_dir / "campaign_manager.py"),
                            "check",
                        ]
                    )
                break

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            if not self.show_target_audience_preview():
                break

            # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –∫–∞–º–ø–∞–Ω–∏–∏
            mode, use_multi_account = self.select_campaign_mode()

            if mode == "analysis-only":
                self.run_analysis_only()
            else:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                test_limit = 3
                if mode in ["test-only", "full-with-test"]:
                    test_limit = self.get_test_limit()

                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                multi_info = (
                    "—Å –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç–æ–º"
                    if use_multi_account
                    else "—Å –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"
                )

                if mode == "test-only":
                    message = f"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ {test_limit} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ {multi_info}?"
                elif mode == "full-only":
                    message = f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ë–ï–ó —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {multi_info}?"
                else:
                    message = f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é (—Ç–µ—Å—Ç {test_limit} + –ø–æ–ª–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞) {multi_info}?"

                if not self.ask_confirmation(message):
                    print("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
                    continue

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
                self.run_campaign(mode, test_limit, use_multi_account)

            # –ü–æ—Å–ª–µ–∫–∞–º–ø–∞–Ω–µ–π–Ω—ã–µ –æ–ø—Ü–∏–∏
            action = self.show_post_campaign_options()
            if action == "exit":
                break
            # –ï—Å–ª–∏ action == "menu", —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        launcher = InteractiveCampaignLauncher()
        launcher.run()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
